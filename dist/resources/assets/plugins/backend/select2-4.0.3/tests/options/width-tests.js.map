{"version":3,"sources":["../../../../../../../../resources/assets/plugins/backend/select2-4.0.3/tests/options/width-tests.js"],"names":["module","$","require","Select2","select","test","assert","$test","width","_resolveWidth","equal","$style","append"],"mappings":";;AAAAA,OAAO,iBAAP;;AAEA,IAAIC,IAAIC,QAAQ,QAAR,CAAR;;AAEA,IAAIC,UAAUD,QAAQ,cAAR,CAAd;AACA,IAAIE,SAAS,IAAID,OAAJ,CAAYF,EAAE,mBAAF,CAAZ,CAAb;;AAEAI,KAAK,wBAAL,EAA+B,UAAUC,MAAV,EAAkB;AAC/C,MAAIC,QAAQN,EAAE,mBAAF,CAAZ;;AAEA,MAAIO,QAAQJ,OAAOK,aAAP,CAAqBF,KAArB,EAA4B,KAA5B,CAAZ;;AAEAD,SAAOI,KAAP,CAAaF,KAAb,EAAoB,KAApB;AACD,CAND;;AAQAH,KAAK,4BAAL,EAAmC,UAAUC,MAAV,EAAkB;AACnD,MAAIC,QAAQN,EAAE,sCAAF,CAAZ;;AAEA,MAAIO,QAAQJ,OAAOK,aAAP,CAAqBF,KAArB,EAA4B,OAA5B,CAAZ;;AAEAD,SAAOI,KAAP,CAAaF,KAAb,EAAoB,KAApB;AACD,CAND;;AAQAH,KAAK,mDAAL,EAA0D,UAAUC,MAAV,EAAkB;AAC1E,MAAIC,QAAQN,EAAE,kBAAF,CAAZ;;AAEA,MAAIO,QAAQJ,OAAOK,aAAP,CAAqBF,KAArB,EAA4B,OAA5B,CAAZ;;AAEAD,SAAOI,KAAP,CAAaF,KAAb,EAAoB,IAApB;AACD,CAND;;AAQAH,KAAK,mCAAL,EAA0C,UAAUC,MAAV,EAAkB;AAC1D,MAAIK,SAASV,EACX,iEADW,CAAb;AAGA,MAAIM,QAAQN,EAAE,yCAAF,CAAZ;;AAEAA,IAAE,gBAAF,EAAoBW,MAApB,CAA2BD,MAA3B;AACAV,IAAE,gBAAF,EAAoBW,MAApB,CAA2BL,KAA3B;;AAEA,MAAIC,QAAQJ,OAAOK,aAAP,CAAqBF,KAArB,EAA4B,SAA5B,CAAZ;;AAEAD,SAAOI,KAAP,CAAaF,KAAb,EAAoB,OAApB;AACD,CAZD;;AAcAH,KAAK,uCAAL,EAA8C,UAAUC,MAAV,EAAkB;AAC9D,MAAIC,QAAQN,EAAE,sCAAF,CAAZ;;AAEA,MAAIO,QAAQJ,OAAOK,aAAP,CAAqBF,KAArB,EAA4B,SAA5B,CAAZ;;AAEAD,SAAOI,KAAP,CAAaF,KAAb,EAAoB,KAApB;AACD,CAND;;AAQAH,KAAK,oDAAL,EAA2D,UAAUC,MAAV,EAAkB;AAC3E,MAAIK,SAASV,EACX,iEADW,CAAb;AAGA,MAAIM,QAAQN,EAAE,yCAAF,CAAZ;;AAEAA,IAAE,gBAAF,EAAoBW,MAApB,CAA2BD,MAA3B;AACAV,IAAE,gBAAF,EAAoBW,MAApB,CAA2BL,KAA3B;;AAEA,MAAIC,QAAQJ,OAAOK,aAAP,CAAqBF,KAArB,EAA4B,SAA5B,CAAZ;;AAEAD,SAAOI,KAAP,CAAaF,KAAb,EAAoB,OAApB;AACD,CAZD","file":"width-tests.js","sourcesContent":["module('Options - Width');\n\nvar $ = require('jquery');\n\nvar Select2 = require('select2/core');\nvar select = new Select2($('<select></select>'));\n\ntest('string passed as width', function (assert) {\n  var $test = $('<select></select>');\n\n  var width = select._resolveWidth($test, '80%');\n\n  assert.equal(width, '80%');\n});\n\ntest('width from style attribute', function (assert) {\n  var $test = $('<select style=\"width: 50%;\"></selct>');\n\n  var width = select._resolveWidth($test, 'style');\n\n  assert.equal(width, '50%');\n});\n\ntest('width from style returns null if nothing is found', function (assert) {\n  var $test = $('<select></selct>');\n\n  var width = select._resolveWidth($test, 'style');\n\n  assert.equal(width, null);\n});\n\ntest('width from computed element width', function (assert) {\n  var $style = $(\n    '<style type=\"text/css\">.css-set-width { width: 500px; }</style>'\n  );\n  var $test = $('<select class=\"css-set-width\"></select>');\n\n  $('#qunit-fixture').append($style);\n  $('#qunit-fixture').append($test);\n\n  var width = select._resolveWidth($test, 'element');\n\n  assert.equal(width, '500px');\n});\n\ntest('resolve gets the style if it is there', function (assert) {\n  var $test = $('<select style=\"width: 20%;\"></selct>');\n\n  var width = select._resolveWidth($test, 'resolve');\n\n  assert.equal(width, '20%');\n});\n\ntest('resolve falls back to element if there is no style', function (assert) {\n  var $style = $(\n    '<style type=\"text/css\">.css-set-width { width: 500px; }</style>'\n  );\n  var $test = $('<select class=\"css-set-width\"></select>');\n\n  $('#qunit-fixture').append($style);\n  $('#qunit-fixture').append($test);\n\n  var width = select._resolveWidth($test, 'resolve');\n\n  assert.equal(width, '500px');\n});\n"]}