{"version":3,"sources":["../../../../../../../../resources/assets/plugins/backend/select2-4.0.3/tests/options/deprecated-tests.js"],"names":["module","$","require","Options","test","assert","expect","$test","called","options","initSelection","$element","callback","id","text","ok","DataAdapter","get","data","current","equal","length","item","isArray","query","params","results","term","url"],"mappings":"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","file":"deprecated-tests.js","sourcesContent":["module('Options - Deprecated - initSelection');\n\nvar $ = require('jquery');\nvar Options = require('select2/options');\n\ntest('converted into dataAdapter.current', function (assert) {\n  assert.expect(5);\n\n  var $test = $('<select></select>');\n  var called = false;\n\n  var options = new Options({\n    initSelection: function ($element, callback) {\n      called = true;\n\n      callback([{\n        id: '1',\n        text: '2'\n      }]);\n    }\n  }, $test);\n\n  assert.ok(!called, 'initSelection should not have been called');\n\n  var DataAdapter = options.get('dataAdapter');\n  var data = new DataAdapter($test, options);\n\n  data.current(function (data) {\n    assert.equal(\n      data.length,\n      1,\n      'There should have only been one object selected'\n    );\n\n    var item = data[0];\n\n    assert.equal(\n      item.id,\n      '1',\n      'The id should have been set by initSelection'\n    );\n\n    assert.equal(\n      item.text,\n      '2',\n      'The text should have been set by initSelection'\n    );\n  });\n\n  assert.ok(called, 'initSelection should have been called');\n});\n\ntest('single option converted to array automatically', function (assert) {\n  assert.expect(2);\n\n  var $test = $('<select></select>');\n  var called = false;\n\n  var options = new Options({\n    initSelection: function ($element, callback) {\n      called = true;\n\n      callback({\n        id: '1',\n        text: '2'\n      });\n    }\n  }, $test);\n\n  var DataAdapter = options.get('dataAdapter');\n  var data = new DataAdapter($test, options);\n\n  data.current(function (data) {\n    assert.ok(\n      $.isArray(data),\n      'The data should have been converted to an array'\n    );\n  });\n\n  assert.ok(called, 'initSelection should have been called');\n});\n\ntest('only called once', function (assert) {\n  assert.expect(8);\n\n  var $test = $('<select><option value=\"3\" selected>4</option></select>');\n  var called = 0;\n\n  var options = new Options({\n    initSelection: function ($element, callback) {\n      called++;\n\n      callback([{\n        id: '1',\n        text: '2'\n      }]);\n    }\n  }, $test);\n\n  var DataAdapter = options.get('dataAdapter');\n  var data = new DataAdapter($test, options);\n\n  data.current(function (data) {\n    assert.equal(\n      data.length,\n      1,\n      'There should have only been a single option'\n    );\n\n    var item = data[0];\n\n    assert.equal(\n      item.id,\n      '1',\n      'The id should match the one given by initSelection'\n    );\n\n    assert.equal(\n      item.text,\n      '2',\n      'The text should match the one given by initSelection'\n    );\n  });\n\n  assert.equal(\n    called,\n    1,\n    'initSelection should have been called'\n  );\n\n  data.current(function (data) {\n    assert.equal(\n      data.length,\n      1,\n      'There should have only been a single option'\n    );\n\n    var item = data[0];\n\n    assert.equal(\n      item.id,\n      '3',\n      'The id should match the value given in the DOM'\n    );\n\n    assert.equal(\n      item.text,\n      '4',\n      'The text should match the text given in the DOM'\n    );\n  });\n\n  assert.equal(\n    called,\n    1,\n    'initSelection should have only been called once'\n  );\n});\n\nmodule('Options - Deprecated - query');\n\ntest('converted into dataAdapter.query automatically', function (assert) {\n  assert.expect(6);\n\n  var $test = $('<select></select>');\n  var called = false;\n\n  var options = new Options({\n    query: function (params) {\n      called = true;\n\n      params.callback({\n        results: [\n          {\n            id: 'test',\n            text: params.term\n          }\n        ]\n      });\n    }\n  }, $test);\n\n  assert.ok(!called, 'The query option should not have been called');\n\n  var DataAdapter = options.get('dataAdapter');\n  var data = new DataAdapter($test, options);\n\n  data.query({\n    term: 'term'\n  }, function (data) {\n    assert.ok(\n      'results' in data,\n      'It should have included the results key'\n    );\n\n    assert.equal(\n      data.results.length,\n      1,\n      'There should have only been a single result returned'\n    );\n\n    var item = data.results[0];\n\n    assert.equal(\n      item.id,\n      'test',\n      'The id should have been returned from the query function'\n    );\n\n    assert.equal(\n      item.text,\n      'term',\n      'The text should have matched the term that was passed in'\n    );\n  });\n\n  assert.ok(called, 'The query function should have been called');\n});\n\nmodule('Options - deprecated - data-ajax-url');\n\ntest('converted ajax-url to ajax--url automatically', function (assert) {\n  var $test = $('<select data-ajax-url=\"test://url\"></select>');\n  var options = new Options({}, $test);\n\n  assert.ok(\n    options.get('ajax'),\n    'The `ajax` key was automatically created'\n  );\n  assert.equal(\n    options.get('ajax').url,\n    'test://url',\n    'The `url` property for the `ajax` option was filled in correctly'\n  );\n});\n\ntest('converted select2-tags to data/tags automatically', function (assert) {\n  var $test = $('<select data-select2-tags=\"original data\"></select>');\n  var options = new Options({}, $test);\n\n  assert.ok(\n    options.get('tags'),\n    'The `tags` key is automatically set to true'\n  );\n  assert.equal(\n    options.get('data'),\n    'original data',\n    'The `data` key is created with the original data'\n  );\n});\n"]}