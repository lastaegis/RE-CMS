{"version":3,"sources":["../../../../../../../../resources/assets/plugins/backend/select2-4.0.3/tests/data/maximumSelectionLength-tests.js"],"names":["module","MaximumSelectionLength","require","$","Options","Utils","MaximumSelectionStub","called","currentData","prototype","current","callback","val","push","query","params","MaximumSelectionData","Decorate","test","assert","zeroOptions","maximumSelectionLength","data","trigger","ok","term","negativeOptions","maxOfOneOptions","maxOfTwoOptions"],"mappings":";;AAAAA,OAAO,0CAAP;;AAEA,IAAIC,yBAAyBC,QAAQ,qCAAR,CAA7B;;AAEA,IAAIC,IAAID,QAAQ,QAAR,CAAR;AACA,IAAIE,UAAUF,QAAQ,iBAAR,CAAd;AACA,IAAIG,QAAQH,QAAQ,eAAR,CAAZ;;AAEA,SAASI,oBAAT,GAAiC;AAC/B,OAAKC,MAAL,GAAc,KAAd;AACA,OAAKC,WAAL,GAAmB,EAAnB;AACD;;AAEDF,qBAAqBG,SAArB,CAA+BC,OAA/B,GAAyC,UAAUC,QAAV,EAAoB;AAC3DA,WAAS,KAAKH,WAAd;AACD,CAFD;;AAIAF,qBAAqBG,SAArB,CAA+BG,GAA/B,GAAqC,UAAUA,GAAV,EAAe;AAClD,OAAKJ,WAAL,CAAiBK,IAAjB,CAAsBD,GAAtB;AACD,CAFD;;AAIAN,qBAAqBG,SAArB,CAA+BK,KAA/B,GAAuC,UAAUC,MAAV,EAAkBJ,QAAlB,EAA4B;AACjE,OAAKJ,MAAL,GAAc,IAAd;AACD,CAFD;;AAIA,IAAIS,uBAAuBX,MAAMY,QAAN,CACzBX,oBADyB,EAEzBL,sBAFyB,CAA3B;;AAKAiB,KAAK,6BAAL,EAAoC,UAAUC,MAAV,EAAkB;AACpD,MAAIC,cAAc,IAAIhB,OAAJ,CAAY;AAC5BiB,4BAAwB;AADI,GAAZ,CAAlB;;AAIA,MAAIC,OAAO,IAAIN,oBAAJ,CAAyB,IAAzB,EAA+BI,WAA/B,CAAX;;AAEAE,OAAKC,OAAL,GAAe,YAAY;AACzBJ,WAAOK,EAAP,CAAU,KAAV,EAAiB,+BAAjB;AACD,GAFD;;AAIAF,OAAKR,KAAL,CAAW;AACTW,UAAM;AADG,GAAX;;AAIAN,SAAOK,EAAP,CAAUF,KAAKf,MAAf;;AAEAe,SAAO,IAAIN,oBAAJ,CAAyB,IAAzB,EAA+BI,WAA/B,CAAP;;AAEAE,OAAKC,OAAL,GAAe,YAAY;AACzBJ,WAAOK,EAAP,CAAU,KAAV,EAAiB,+BAAjB;AACD,GAFD;;AAIAF,OAAKV,GAAL,CAAS,GAAT;;AAEAU,OAAKR,KAAL,CAAW;AACTW,UAAM;AADG,GAAX;;AAIAN,SAAOK,EAAP,CAAUF,KAAKf,MAAf;;AAEAe,SAAO,IAAIN,oBAAJ,CAAyB,IAAzB,EAA+BI,WAA/B,CAAP;;AAEAE,OAAKC,OAAL,GAAe,YAAY;AACzBJ,WAAOK,EAAP,CAAU,KAAV,EAAiB,+BAAjB;AACD,GAFD;;AAIAF,OAAKV,GAAL,CAAS,GAAT;AACAU,OAAKV,GAAL,CAAS,GAAT;;AAEAU,OAAKR,KAAL,CAAW;AACTW,UAAM;AADG,GAAX;;AAIAN,SAAOK,EAAP,CAAUF,KAAKf,MAAf;AACD,CA7CD;;AA+CAW,KAAK,+BAAL,EAAsC,UAAUC,MAAV,EAAkB;AACtD,MAAIO,kBAAkB,IAAItB,OAAJ,CAAY;AAChCiB,4BAAwB,CAAC;AADO,GAAZ,CAAtB;;AAIA,MAAIC,OAAO,IAAIN,oBAAJ,CAAyB,IAAzB,EAA+BU,eAA/B,CAAX;;AAEAJ,OAAKC,OAAL,GAAe,YAAY;AACzBJ,WAAOK,EAAP,CAAU,KAAV,EAAiB,+BAAjB;AACD,GAFD;;AAIAF,OAAKR,KAAL,CAAW;AACTW,UAAM;AADG,GAAX;;AAIAN,SAAOK,EAAP,CAAUF,KAAKf,MAAf;;AAEAe,SAAO,IAAIN,oBAAJ,CAAyB,IAAzB,EAA+BU,eAA/B,CAAP;;AAEAJ,OAAKC,OAAL,GAAe,YAAY;AACzBJ,WAAOK,EAAP,CAAU,KAAV,EAAiB,+BAAjB;AACD,GAFD;;AAIAF,OAAKV,GAAL,CAAS,GAAT;;AAEAU,OAAKR,KAAL,CAAW;AACTW,UAAM;AADG,GAAX;;AAIAN,SAAOK,EAAP,CAAUF,KAAKf,MAAf;;AAEAe,SAAO,IAAIN,oBAAJ,CAAyB,IAAzB,EAA+BU,eAA/B,CAAP;;AAEAJ,OAAKC,OAAL,GAAe,YAAY;AACzBJ,WAAOK,EAAP,CAAU,KAAV,EAAiB,+BAAjB;AACD,GAFD;;AAIAF,OAAKV,GAAL,CAAS,GAAT;AACAU,OAAKV,GAAL,CAAS,GAAT;;AAEAU,OAAKR,KAAL,CAAW;AACTW,UAAM;AADG,GAAX;;AAIAN,SAAOK,EAAP,CAAUF,KAAKf,MAAf;AACD,CA7CD;;AA+CAW,KAAK,8BAAL,EAAsC,UAAUC,MAAV,EAAkB;AACtD,MAAIQ,kBAAkB,IAAIvB,OAAJ,CAAY;AAChCiB,4BAAwB;AADQ,GAAZ,CAAtB;AAGA,MAAIC,OAAO,IAAIN,oBAAJ,CAAyB,IAAzB,EAA+BW,eAA/B,CAAX;;AAEAL,OAAKC,OAAL,GAAe,YAAY;AACzBJ,WAAOK,EAAP,CAAU,KAAV,EAAiB,+BAAjB;AACD,GAFD;;AAIAF,OAAKR,KAAL,CAAW;AACTW,UAAM;AADG,GAAX;;AAIAN,SAAOK,EAAP,CAAUF,KAAKf,MAAf;;AAEAe,SAAO,IAAIN,oBAAJ,CAAyB,IAAzB,EAA+BW,eAA/B,CAAP;;AAEAL,OAAKC,OAAL,GAAe,YAAY;AACzBJ,WAAOK,EAAP,CAAU,IAAV,EAAgB,gCAAhB;AACD,GAFD;;AAIAF,OAAKV,GAAL,CAAS,GAAT;;AAEAU,OAAKR,KAAL,CAAW;AACTW,UAAM;AADG,GAAX;;AAIAN,SAAOK,EAAP,CAAU,CAACF,KAAKf,MAAhB;AAED,CA9BD;;AAgCAW,KAAK,+BAAL,EAAuC,UAAUC,MAAV,EAAkB;AACvD,MAAIS,kBAAkB,IAAIxB,OAAJ,CAAY;AAChCiB,4BAAwB;AADQ,GAAZ,CAAtB;AAGA,MAAIC,OAAO,IAAIN,oBAAJ,CAAyB,IAAzB,EAA+BY,eAA/B,CAAX;;AAEAN,OAAKC,OAAL,GAAe,YAAY;AACzBJ,WAAOK,EAAP,CAAU,KAAV,EAAiB,+BAAjB;AACD,GAFD;;AAIAF,OAAKR,KAAL,CAAW;AACTW,UAAM;AADG,GAAX;;AAIAN,SAAOK,EAAP,CAAUF,KAAKf,MAAf;;AAEAe,SAAO,IAAIN,oBAAJ,CAAyB,IAAzB,EAA+BY,eAA/B,CAAP;;AAEAN,OAAKC,OAAL,GAAe,YAAY;AACzBJ,WAAOK,EAAP,CAAU,KAAV,EAAiB,+BAAjB;AACD,GAFD;;AAIAF,OAAKV,GAAL,CAAS,GAAT;;AAEAU,OAAKR,KAAL,CAAW;AACTW,UAAM;AADG,GAAX;;AAIAN,SAAOK,EAAP,CAAUF,KAAKf,MAAf;;AAEAe,SAAO,IAAIN,oBAAJ,CAAyB,IAAzB,EAA+BY,eAA/B,CAAP;;AAEAN,OAAKC,OAAL,GAAe,YAAY;AACzBJ,WAAOK,EAAP,CAAU,IAAV,EAAgB,gCAAhB;AACD,GAFD;;AAIAF,OAAKV,GAAL,CAAS,GAAT;AACAU,OAAKV,GAAL,CAAS,GAAT;;AAEAU,OAAKR,KAAL,CAAW;AACTW,UAAM;AADG,GAAX;;AAIAN,SAAOK,EAAP,CAAU,CAACF,KAAKf,MAAhB;AAED,CA7CD","file":"maximumSelectionLength-tests.js","sourcesContent":["module('Data adapters - Maximum selection length');\n\nvar MaximumSelectionLength = require('select2/data/maximumSelectionLength');\n\nvar $ = require('jquery');\nvar Options = require('select2/options');\nvar Utils = require('select2/utils');\n\nfunction MaximumSelectionStub () {\n  this.called = false;\n  this.currentData = [];\n}\n\nMaximumSelectionStub.prototype.current = function (callback) {\n  callback(this.currentData);\n};\n\nMaximumSelectionStub.prototype.val = function (val) {\n  this.currentData.push(val);\n};\n\nMaximumSelectionStub.prototype.query = function (params, callback) {\n  this.called = true;\n};\n\nvar MaximumSelectionData = Utils.Decorate(\n  MaximumSelectionStub,\n  MaximumSelectionLength\n);\n\ntest('0 never displays the notice', function (assert) {\n  var zeroOptions = new Options({\n    maximumSelectionLength: 0\n  });\n\n  var data = new MaximumSelectionData(null, zeroOptions);\n\n  data.trigger = function () {\n    assert.ok(false, 'No events should be triggered');\n  };\n\n  data.query({\n    term: ''\n  });\n\n  assert.ok(data.called);\n\n  data = new MaximumSelectionData(null, zeroOptions);\n\n  data.trigger = function () {\n    assert.ok(false, 'No events should be triggered');\n  };\n\n  data.val('1');\n\n  data.query({\n    term: ''\n  });\n\n  assert.ok(data.called);\n\n  data = new MaximumSelectionData(null, zeroOptions);\n\n  data.trigger = function () {\n    assert.ok(false, 'No events should be triggered');\n  };\n\n  data.val('1');\n  data.val('2');\n\n  data.query({\n    term: ''\n  });\n\n  assert.ok(data.called);\n});\n\ntest('< 0 never displays the notice', function (assert) {\n  var negativeOptions = new Options({\n    maximumSelectionLength: -1\n  });\n\n  var data = new MaximumSelectionData(null, negativeOptions);\n\n  data.trigger = function () {\n    assert.ok(false, 'No events should be triggered');\n  };\n\n  data.query({\n    term: ''\n  });\n\n  assert.ok(data.called);\n\n  data = new MaximumSelectionData(null, negativeOptions);\n\n  data.trigger = function () {\n    assert.ok(false, 'No events should be triggered');\n  };\n\n  data.val('1');\n\n  data.query({\n    term: ''\n  });\n\n  assert.ok(data.called);\n\n  data = new MaximumSelectionData(null, negativeOptions);\n\n  data.trigger = function () {\n    assert.ok(false, 'No events should be triggered');\n  };\n\n  data.val('1');\n  data.val('2');\n\n  data.query({\n    term: ''\n  });\n\n  assert.ok(data.called);\n});\n\ntest('triggers when >= 1 selection' , function (assert) {\n  var maxOfOneOptions = new Options({\n    maximumSelectionLength: 1\n  });\n  var data = new MaximumSelectionData(null, maxOfOneOptions);\n\n  data.trigger = function () {\n    assert.ok(false, 'No events should be triggered');\n  };\n\n  data.query({\n    term: ''\n  });\n\n  assert.ok(data.called);\n\n  data = new MaximumSelectionData(null, maxOfOneOptions);\n\n  data.trigger = function () {\n    assert.ok(true, 'The event should be triggered.');\n  };\n\n  data.val('1');\n\n  data.query({\n    term: ''\n  });\n\n  assert.ok(!data.called);\n\n});\n\ntest('triggers when >= 2 selections' , function (assert) {\n  var maxOfTwoOptions = new Options({\n    maximumSelectionLength: 2\n  });\n  var data = new MaximumSelectionData(null, maxOfTwoOptions);\n\n  data.trigger = function () {\n    assert.ok(false, 'No events should be triggered');\n  };\n\n  data.query({\n    term: ''\n  });\n\n  assert.ok(data.called);\n\n  data = new MaximumSelectionData(null, maxOfTwoOptions);\n\n  data.trigger = function () {\n    assert.ok(false, 'No events should be triggered');\n  };\n\n  data.val('1');\n\n  data.query({\n    term: ''\n  });\n\n  assert.ok(data.called);\n\n  data = new MaximumSelectionData(null, maxOfTwoOptions);\n\n  data.trigger = function () {\n    assert.ok(true, 'The event should be triggered.');\n  };\n\n  data.val('1');\n  data.val('2');\n\n  data.query({\n    term: ''\n  });\n\n  assert.ok(!data.called);\n\n});\n"]}