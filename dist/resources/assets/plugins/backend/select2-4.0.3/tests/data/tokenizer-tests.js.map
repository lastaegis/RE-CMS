{"version":3,"sources":["../../../../../../../../resources/assets/plugins/backend/select2-4.0.3/tests/data/tokenizer-tests.js"],"names":["module","test","assert","expect","SelectData","require","Tokenizer","Tags","Options","Utils","$","TokenizedSelect","Decorate","$select","options","tags","tokenSeparators","container","MockContainer","dropdown","selection","$container","data","bind","on","ok","query","term","createTag","params","length","text","substr","id","equal","children"],"mappings":";;AAAAA,OAAO,0BAAP;;AAEAC,KAAK,2BAAL,EAAkC,UAAUC,MAAV,EAAkB;AAClDA,SAAOC,MAAP,CAAc,CAAd;;AAEA,MAAIC,aAAaC,QAAQ,qBAAR,CAAjB;AACA,MAAIC,YAAYD,QAAQ,wBAAR,CAAhB;AACA,MAAIE,OAAOF,QAAQ,mBAAR,CAAX;;AAEA,MAAIG,UAAUH,QAAQ,iBAAR,CAAd;AACA,MAAII,QAAQJ,QAAQ,eAAR,CAAZ;;AAEA,MAAIK,IAAIL,QAAQ,QAAR,CAAR;;AAEA,MAAIM,kBAAkBF,MAAMG,QAAN,CACpBH,MAAMG,QAAN,CAAeR,UAAf,EAA2BG,IAA3B,CADoB,EAEpBD,SAFoB,CAAtB;AAIA,MAAIO,UAAUH,EAAE,wBAAF,CAAd;;AAEA,MAAII,UAAU,IAAIN,OAAJ,CAAY;AACxBO,UAAM,IADkB;AAExBC,qBAAiB,CAAC,GAAD;AAFO,GAAZ,CAAd;;AAKA,MAAIC,YAAY,IAAIC,aAAJ,EAAhB;AACAD,YAAUE,QAAV,GAAqBF,UAAUG,SAAV,GAAsB,EAA3C;;AAEA,MAAIC,aAAaX,EAAE,aAAF,CAAjB;;AAEA,MAAIY,OAAO,IAAIX,eAAJ,CAAoBE,OAApB,EAA6BC,OAA7B,CAAX;AACAQ,OAAKC,IAAL,CAAUN,SAAV,EAAqBI,UAArB;;AAEAC,OAAKE,EAAL,CAAQ,QAAR,EAAkB,YAAY;AAC5BtB,WAAOuB,EAAP,CAAU,IAAV,EAAgB,sCAAhB;AACD,GAFD;;AAIAH,OAAKI,KAAL,CAAW;AACTC,UAAM;AADG,GAAX,EAEG,YAAY;AACbzB,WAAOuB,EAAP,CAAU,IAAV,EAAgB,oCAAhB;AACD,GAJD;AAKD,CAxCD;;AA0CAxB,KAAK,2BAAL,EAAkC,UAAUC,MAAV,EAAkB;AAClDA,SAAOC,MAAP,CAAc,CAAd;;AAEA,MAAIC,aAAaC,QAAQ,qBAAR,CAAjB;AACA,MAAIC,YAAYD,QAAQ,wBAAR,CAAhB;AACA,MAAIE,OAAOF,QAAQ,mBAAR,CAAX;;AAEA,MAAIG,UAAUH,QAAQ,iBAAR,CAAd;AACA,MAAII,QAAQJ,QAAQ,eAAR,CAAZ;;AAEA,MAAIK,IAAIL,QAAQ,QAAR,CAAR;;AAEA,MAAIM,kBAAkBF,MAAMG,QAAN,CACpBH,MAAMG,QAAN,CAAeR,UAAf,EAA2BG,IAA3B,CADoB,EAEpBD,SAFoB,CAAtB;AAIA,MAAIO,UAAUH,EAAE,wBAAF,CAAd;;AAEA,MAAII,UAAU,IAAIN,OAAJ,CAAY;AACxBO,UAAM,IADkB;AAExBC,qBAAiB,CAAC,GAAD,CAFO;AAGxBY,eAAW,qBAAY;AACrB1B,aAAOuB,EAAP,CAAU,IAAV,EAAgB,mCAAhB;;AAEA,aAAO,IAAP;AACD;AAPuB,GAAZ,CAAd;;AAUA,MAAIR,YAAY,IAAIC,aAAJ,EAAhB;AACAD,YAAUE,QAAV,GAAqBF,UAAUG,SAAV,GAAsB,EAA3C;;AAEA,MAAIC,aAAaX,EAAE,aAAF,CAAjB;;AAEA,MAAIY,OAAO,IAAIX,eAAJ,CAAoBE,OAApB,EAA6BC,OAA7B,CAAX;AACAQ,OAAKC,IAAL,CAAUN,SAAV,EAAqBI,UAArB;;AAEAC,OAAKE,EAAL,CAAQ,QAAR,EAAkB,UAAUK,MAAV,EAAkB;AAClC,QAAIA,OAAOP,IAAP,IAAe,IAAnB,EAAyB;AACvBpB,aAAOuB,EAAP,CAAU,KAAV,EAAiB,oCAAjB;AACD;AACF,GAJD;;AAMAH,OAAKI,KAAL,CAAW;AACTC,UAAM;AADG,GAAX,EAEG,YAAY;AACbzB,WAAOuB,EAAP,CAAU,IAAV,EAAgB,oCAAhB;AACD,GAJD;AAKD,CA/CD;;AAiDAxB,KAAK,gDAAL,EAAuD,UAAUC,MAAV,EAAkB;AACvEA,SAAOC,MAAP,CAAc,CAAd;;AAEA,MAAIC,aAAaC,QAAQ,qBAAR,CAAjB;AACA,MAAIC,YAAYD,QAAQ,wBAAR,CAAhB;AACA,MAAIE,OAAOF,QAAQ,mBAAR,CAAX;;AAEA,MAAIG,UAAUH,QAAQ,iBAAR,CAAd;AACA,MAAII,QAAQJ,QAAQ,eAAR,CAAZ;;AAEA,MAAIK,IAAIL,QAAQ,QAAR,CAAR;;AAEA,MAAIM,kBAAkBF,MAAMG,QAAN,CACpBH,MAAMG,QAAN,CAAeR,UAAf,EAA2BG,IAA3B,CADoB,EAEpBD,SAFoB,CAAtB;AAIA,MAAIO,UAAUH,EAAE,wBAAF,CAAd;;AAEA,MAAII,UAAU,IAAIN,OAAJ,CAAY;AACxBO,UAAM,IADkB;AAExBC,qBAAiB,CAAC,GAAD,EAAM,GAAN,CAFO;AAGxBY,eAAW,mBAAUC,MAAV,EAAkB;AAC3B,UAAIF,OAAOE,OAAOF,IAAlB;;AAEA;AACA,UAAIA,KAAKG,MAAL,KAAgB,CAApB,EAAuB;AACrB,eAAO,IAAP;AACD;;AAED;AACA,UAAIH,SAAS,GAAb,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED;AACA,UAAIA,KAAK,CAAL,MAAY,GAAZ,IAAmBA,KAAKA,KAAKG,MAAL,GAAc,CAAnB,MAA0B,GAAjD,EAAsD;AACpD,eAAO,IAAP;AACD;;AAED,UAAIC,OAAOJ,KAAKK,MAAL,CAAY,CAAZ,EAAeL,KAAKG,MAAL,GAAc,CAA7B,CAAX;;AAEA,aAAO;AACLG,YAAIN,IADC;AAELI,cAAMA;AAFD,OAAP;AAID;AA3BuB,GAAZ,CAAd;;AA8BA,MAAId,YAAY,IAAIC,aAAJ,EAAhB;AACAD,YAAUE,QAAV,GAAqBF,UAAUG,SAAV,GAAsB,EAA3C;;AAEA,MAAIC,aAAaX,EAAE,aAAF,CAAjB;;AAEA,MAAIY,OAAO,IAAIX,eAAJ,CAAoBE,OAApB,EAA6BC,OAA7B,CAAX;AACAQ,OAAKC,IAAL,CAAUN,SAAV,EAAqBI,UAArB;;AAEAC,OAAKE,EAAL,CAAQ,QAAR,EAAkB,UAAUK,MAAV,EAAkB;AAClC3B,WAAOuB,EAAP,CAAUI,OAAOP,IAAjB,EAAuB,yBAAvB;;AAEApB,WAAOgC,KAAP,CACEL,OAAOP,IAAP,CAAYW,EADd,EAEE,iBAFF,EAGE,+BAHF;;AAMA/B,WAAOgC,KAAP,CACEL,OAAOP,IAAP,CAAYS,IADd,EAEE,eAFF,EAGE,qCAHF;AAKD,GAdD;;AAgBAT,OAAKI,KAAL,CAAW;AACTC,UAAM;AADG,GAAX,EAEG,YAAY;AACbzB,WAAOuB,EAAP,CAAU,IAAV,EAAgB,oCAAhB;AACD,GAJD;AAKD,CA7ED;;AA+EAxB,KAAK,kCAAL,EAAyC,UAAUC,MAAV,EAAkB;AACzDA,SAAOC,MAAP,CAAc,CAAd;;AAEA,MAAIC,aAAaC,QAAQ,qBAAR,CAAjB;AACA,MAAIC,YAAYD,QAAQ,wBAAR,CAAhB;AACA,MAAIE,OAAOF,QAAQ,mBAAR,CAAX;;AAEA,MAAIG,UAAUH,QAAQ,iBAAR,CAAd;AACA,MAAII,QAAQJ,QAAQ,eAAR,CAAZ;;AAEA,MAAIK,IAAIL,QAAQ,QAAR,CAAR;;AAEA,MAAIM,kBAAkBF,MAAMG,QAAN,CACpBH,MAAMG,QAAN,CAAeR,UAAf,EAA2BG,IAA3B,CADoB,EAEpBD,SAFoB,CAAtB;AAIA,MAAIO,UAAUH,EAAE,0BAAF,CAAd;;AAEA,MAAII,UAAU,IAAIN,OAAJ,CAAY;AACxBO,UAAM,IADkB;AAExBC,qBAAiB,CAAC,GAAD;AAFO,GAAZ,CAAd;;AAKA,MAAIC,YAAY,IAAIC,aAAJ,EAAhB;AACAD,YAAUE,QAAV,GAAqBF,UAAUG,SAAV,GAAsB,EAA3C;;AAEA,MAAIC,aAAaX,EAAE,aAAF,CAAjB;;AAEA,MAAIY,OAAO,IAAIX,eAAJ,CAAoBE,OAApB,EAA6BC,OAA7B,CAAX;AACAQ,OAAKC,IAAL,CAAUN,SAAV,EAAqBI,UAArB;;AAEAC,OAAKE,EAAL,CAAQ,QAAR,EAAkB,YAAY;AAC5BtB,WAAOuB,EAAP,CAAU,IAAV,EAAgB,sCAAhB;AACD,GAFD;;AAIAH,OAAKI,KAAL,CAAW;AACTC,UAAM;AADG,GAAX,EAEG,YAAY;AACbzB,WAAOuB,EAAP,CAAU,IAAV,EAAgB,oCAAhB;AACD,GAJD;;AAMAvB,SAAOgC,KAAP,CACErB,QAAQsB,QAAR,CAAiB,QAAjB,EAA2BL,MAD7B,EAEE,CAFF,EAGE,2CAHF;AAKD,CA9CD","file":"tokenizer-tests.js","sourcesContent":["module('Data adaptor - Tokenizer');\n\ntest('triggers the select event', function (assert) {\n  assert.expect(2);\n\n  var SelectData = require('select2/data/select');\n  var Tokenizer = require('select2/data/tokenizer');\n  var Tags = require('select2/data/tags');\n\n  var Options = require('select2/options');\n  var Utils = require('select2/utils');\n\n  var $ = require('jquery');\n\n  var TokenizedSelect = Utils.Decorate(\n    Utils.Decorate(SelectData, Tags),\n    Tokenizer\n  );\n  var $select = $('#qunit-fixture .single');\n\n  var options = new Options({\n    tags: true,\n    tokenSeparators: [',']\n  });\n\n  var container = new MockContainer();\n  container.dropdown = container.selection = {};\n\n  var $container = $('<div></div>');\n\n  var data = new TokenizedSelect($select, options);\n  data.bind(container, $container);\n\n  data.on('select', function () {\n    assert.ok(true, 'The select event should be triggered');\n  });\n\n  data.query({\n    term: 'first,second'\n  }, function () {\n    assert.ok(true, 'The callback should have succeeded');\n  });\n});\n\ntest('createTag can return null', function (assert) {\n  assert.expect(3);\n\n  var SelectData = require('select2/data/select');\n  var Tokenizer = require('select2/data/tokenizer');\n  var Tags = require('select2/data/tags');\n\n  var Options = require('select2/options');\n  var Utils = require('select2/utils');\n\n  var $ = require('jquery');\n\n  var TokenizedSelect = Utils.Decorate(\n    Utils.Decorate(SelectData, Tags),\n    Tokenizer\n  );\n  var $select = $('#qunit-fixture .single');\n\n  var options = new Options({\n    tags: true,\n    tokenSeparators: [','],\n    createTag: function () {\n      assert.ok(true, 'createTag should have been called');\n\n      return null;\n    }\n  });\n\n  var container = new MockContainer();\n  container.dropdown = container.selection = {};\n\n  var $container = $('<div></div>');\n\n  var data = new TokenizedSelect($select, options);\n  data.bind(container, $container);\n\n  data.on('select', function (params) {\n    if (params.data == null) {\n      assert.ok(false, 'Null data should never be selected');\n    }\n  });\n\n  data.query({\n    term: 'first,second'\n  }, function () {\n    assert.ok(true, 'The callback should have succeeded');\n  });\n});\n\ntest('createTag returning null does not cut the term', function (assert) {\n  assert.expect(4);\n\n  var SelectData = require('select2/data/select');\n  var Tokenizer = require('select2/data/tokenizer');\n  var Tags = require('select2/data/tags');\n\n  var Options = require('select2/options');\n  var Utils = require('select2/utils');\n\n  var $ = require('jquery');\n\n  var TokenizedSelect = Utils.Decorate(\n    Utils.Decorate(SelectData, Tags),\n    Tokenizer\n  );\n  var $select = $('#qunit-fixture .single');\n\n  var options = new Options({\n    tags: true,\n    tokenSeparators: [',', '\"'],\n    createTag: function (params) {\n      var term = params.term;\n\n      // Ignore blanks\n      if (term.length === 0) {\n        return null;\n      }\n\n      // Ignore the leading quote\n      if (term === '\"') {\n        return null;\n      }\n\n      // If there is a leading quote, check for a second one\n      if (term[0] === '\"' && term[term.length - 1] !== '\"') {\n        return null;\n      }\n\n      var text = term.substr(1, term.length - 2);\n\n      return {\n        id: term,\n        text: text\n      };\n    }\n  });\n\n  var container = new MockContainer();\n  container.dropdown = container.selection = {};\n\n  var $container = $('<div></div>');\n\n  var data = new TokenizedSelect($select, options);\n  data.bind(container, $container);\n\n  data.on('select', function (params) {\n    assert.ok(params.data, 'Data should not be null');\n\n    assert.equal(\n      params.data.id,\n      '\"first, second\"',\n      'The id should have the quotes'\n    );\n\n    assert.equal(\n      params.data.text,\n      'first, second',\n      'The text should not have the quotes'\n    );\n  });\n\n  data.query({\n    term: '\"first, second\",abc'\n  }, function () {\n    assert.ok(true, 'The callback should have succeeded');\n  });\n});\n\ntest('works with multiple tokens given', function (assert) {\n  assert.expect(4);\n\n  var SelectData = require('select2/data/select');\n  var Tokenizer = require('select2/data/tokenizer');\n  var Tags = require('select2/data/tags');\n\n  var Options = require('select2/options');\n  var Utils = require('select2/utils');\n\n  var $ = require('jquery');\n\n  var TokenizedSelect = Utils.Decorate(\n    Utils.Decorate(SelectData, Tags),\n    Tokenizer\n  );\n  var $select = $('#qunit-fixture .multiple');\n\n  var options = new Options({\n    tags: true,\n    tokenSeparators: [',']\n  });\n\n  var container = new MockContainer();\n  container.dropdown = container.selection = {};\n\n  var $container = $('<div></div>');\n\n  var data = new TokenizedSelect($select, options);\n  data.bind(container, $container);\n\n  data.on('select', function () {\n    assert.ok(true, 'The select event should be triggered');\n  });\n\n  data.query({\n    term: 'first,second,third'\n  }, function () {\n    assert.ok(true, 'The callback should have succeeded');\n  });\n\n  assert.equal(\n    $select.children('option').length,\n    3,\n    'The two new tags should have been created'\n  );\n});"]}