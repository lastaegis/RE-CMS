{"version":3,"sources":["../../../../../../../../resources/assets/plugins/backend/select2-4.0.3/tests/data/array-tests.js"],"names":["module","ArrayData","require","$","Options","arrayOptions","data","id","text","extraOptions","extra","nestedOptions","children","test","assert","$select","current","val","equal","length","item","option","select","deepEqual","find","ok","$group","prop","options"],"mappings":"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","file":"array-tests.js","sourcesContent":["module('Data adapters - Array');\n\nvar ArrayData = require('select2/data/array');\nvar $ = require('jquery');\nvar Options = require('select2/options');\n\nvar arrayOptions = new Options({\n  data: [\n    {\n      id: 'default',\n      text: 'Default'\n    },\n    {\n      id: '1',\n      text: 'One'\n    },\n    {\n      id: '2',\n      text: '2'\n    }\n  ]\n});\n\nvar extraOptions = new Options ({\n  data: [\n    {\n      id: 'default',\n      text: 'Default',\n      extra: true\n    },\n    {\n      id: 'One',\n      text: 'One',\n      extra: true\n    }\n  ]\n});\n\nvar nestedOptions = new Options({\n  data: [\n    {\n      text: 'Default',\n      children: [\n        {\n          text: 'Next',\n          children: [\n            {\n              id: 'a',\n              text: 'Option'\n            }\n          ]\n        }\n      ]\n    }\n  ]\n});\n\ntest('current gets default for single', function (assert) {\n  var $select = $('#qunit-fixture .single-empty');\n\n  var data = new ArrayData($select, arrayOptions);\n\n  data.current(function (val) {\n    assert.equal(\n      val.length,\n      1,\n      'There should always be a selected item for array data.'\n    );\n\n    var item = val[0];\n\n    assert.equal(\n      item.id,\n      'default',\n      'The first item should be selected'\n    );\n  });\n});\n\ntest('current gets default for multiple', function (assert) {\n  var $select = $('#qunit-fixture .multiple');\n\n  var data = new ArrayData($select, arrayOptions);\n\n  data.current(function (val) {\n    assert.equal(\n      val.length,\n      0,\n      'There should be no default selection.'\n    );\n  });\n});\n\ntest('current works with existing selections', function (assert) {\n  var $select = $('#qunit-fixture .multiple');\n\n  var data = new ArrayData($select, arrayOptions);\n\n  $select.val(['One']);\n\n  data.current(function (val) {\n    assert.equal(\n      val.length,\n      1,\n      'There should only be one existing selection.'\n    );\n\n    var option = val[0];\n\n    assert.equal(\n      option.id,\n      'One',\n      'The id should be equal to the value of the option tag.'\n    );\n\n    assert.equal(\n      option.text,\n      'One',\n      'The text should be equal to the text of the option tag.'\n    );\n  });\n});\n\ntest('current works with selected data', function (assert) {\n  var $select = $('#qunit-fixture .single-empty');\n\n  var data = new ArrayData($select, arrayOptions);\n\n  data.select({\n    id: '2',\n    text: '2'\n  });\n\n  data.current(function (val) {\n    assert.equal(\n      val.length,\n      1,\n      'There should only be one option selected.'\n    );\n\n    var option = val[0];\n\n    assert.equal(\n      option.id,\n      '2',\n      'The id should match the original id from the array.'\n    );\n\n    assert.equal(\n      option.text,\n      '2',\n      'The text should match the original text from the array.'\n    );\n  });\n});\n\ntest('select works for single', function (assert) {\n  var $select = $('#qunit-fixture .single-empty');\n\n  var data = new ArrayData($select, arrayOptions);\n\n  assert.equal(\n    $select.val(),\n    'default',\n    'There should already be a selection'\n  );\n\n  data.select({\n    id: '1',\n    text: 'One'\n  });\n\n  assert.equal(\n    $select.val(),\n    '1',\n    'The selected value should be the same as the selected id'\n  );\n});\n\ntest('multiple sets the value', function (assert) {\n  var $select = $('#qunit-fixture .multiple');\n\n  var data = new ArrayData($select, arrayOptions);\n\n  assert.equal($select.val(), null);\n\n  data.select({\n    id: 'default',\n    text: 'Default'\n  });\n\n  assert.deepEqual($select.val(), ['default']);\n});\n\ntest('multiple adds to the old value', function (assert) {\n  var $select = $('#qunit-fixture .multiple');\n\n  var data = new ArrayData($select, arrayOptions);\n\n  $select.val(['One']);\n\n  assert.deepEqual($select.val(), ['One']);\n\n  data.select({\n    id: 'default',\n    text: 'Default'\n  });\n\n  assert.deepEqual($select.val(), ['One', 'default']);\n});\n\ntest('option tags are automatically generated', function (assert) {\n  var $select = $('#qunit-fixture .single-empty');\n\n  var data = new ArrayData($select, arrayOptions);\n\n  assert.equal(\n    $select.find('option').length,\n    3,\n    'An <option> element should be created for each object'\n  );\n});\n\ntest('option tags can receive new data', function(assert) {\n  var $select = $('#qunit-fixture .single');\n\n  var data = new ArrayData($select, extraOptions);\n\n  assert.equal(\n    $select.find('option').length,\n    2,\n    'Only one more <option> element should be created'\n  );\n\n  data.select({\n    id: 'default'\n  });\n\n  assert.ok(\n    $select.find(':selected').data('data').extra,\n    '<option> default should have new data'\n  );\n\n  data.select({\n    id: 'One'\n  });\n\n  assert.ok(\n    $select.find(':selected').data('data').extra,\n    '<option> One should have new data'\n  );\n});\n\ntest('optgroup tags can also be generated', function (assert) {\n  var $select = $('#qunit-fixture .single-empty');\n\n  var data = new ArrayData($select, nestedOptions);\n\n  assert.equal(\n    $select.find('option').length,\n    1,\n    'An <option> element should be created for the one selectable object'\n  );\n\n  assert.equal(\n    $select.find('optgroup').length,\n    2,\n    'An <optgroup> element should be created for the two with children'\n  );\n});\n\ntest('optgroup tags have the right properties', function (assert) {\n  var $select = $('#qunit-fixture .single-empty');\n\n  var data = new ArrayData($select, nestedOptions);\n\n  var $group = $select.children('optgroup');\n\n  assert.equal(\n    $group.prop('label'),\n    'Default',\n    'An `<optgroup>` label should match the text property'\n  );\n\n  assert.equal(\n    $group.children().length,\n    1,\n    'The <optgroup> should have one child under it'\n  );\n});\n\ntest('existing selections are respected on initialization', function (assert) {\n   var $select = $(\n     '<select>' +\n        '<option>First</option>' +\n        '<option selected>Second</option>' +\n      '</select>'\n    );\n\n    var options = new Options({\n      data: [\n        {\n          id: 'Second',\n          text: 'Second'\n        },\n        {\n          id: 'Third',\n          text: 'Third'\n        }\n      ]\n    });\n\n    assert.equal($select.val(), 'Second');\n\n    var data = new ArrayData($select, options);\n\n    assert.equal($select.val(), 'Second');\n});"]}