{"version":3,"sources":["../../../../../../../../resources/assets/plugins/backend/select2-4.0.3/tests/data/select-tests.js"],"names":["module","SelectData","require","$","Options","selectOptions","test","assert","$select","data","current","equal","length","option","id","text","$option","append","val","select","deepEqual","second","changeTriggered","on","element","ok","selected","query","results","term","item","children","first","duplicate","notEqual"],"mappings":"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","file":"select-tests.js","sourcesContent":["module('Data adapters - Select - current');\n\nvar SelectData = require('select2/data/select');\nvar $ = require('jquery');\nvar Options = require('select2/options');\nvar selectOptions = new Options({});\n\ntest('current gets default for single', function (assert) {\n  var $select = $('#qunit-fixture .single');\n\n  var data = new SelectData($select, selectOptions);\n\n  data.current(function (data) {\n    assert.equal(\n      data.length,\n      1,\n      'There should only be one selected option'\n    );\n\n    var option = data[0];\n\n    assert.equal(\n      option.id,\n      'One',\n      'The value of the option tag should be the id'\n    );\n\n    assert.equal(\n      option.text,\n      'One',\n      'The text within the option tag should be the text'\n    );\n  });\n});\n\ntest('current gets default for multiple', function (assert) {\n  var $select = $('#qunit-fixture .multiple');\n\n  var data = new SelectData($select, selectOptions);\n\n  data.current(function (data) {\n    assert.equal(\n      data.length,\n      0,\n      'Multiple selects have no default selection.'\n    );\n  });\n});\n\ntest('current gets options with explicit value', function (assert) {\n  var $select = $('#qunit-fixture .single');\n\n  var $option = $('<option value=\"1\">One</option>');\n  $select.append($option);\n\n  var data = new SelectData($select, selectOptions);\n\n  $select.val('1');\n\n  data.current(function (data) {\n    assert.equal(\n      data.length,\n      1,\n      'There should be one selected option'\n    );\n\n    var option = data[0];\n\n    assert.equal(\n      option.id,\n      '1',\n      'The option value should be the selected id'\n    );\n\n    assert.equal(\n      option.text,\n      'One',\n      'The text should match the text for the option tag'\n    );\n  });\n});\n\ntest('current gets options with implicit value', function (assert) {\n  var $select = $('#qunit-fixture .single');\n\n  var data = new SelectData($select, selectOptions);\n\n  $select.val('One');\n\n  data.current(function (val) {\n    assert.equal(\n      val.length,\n      1,\n      'There should only be one selected value'\n    );\n\n    var option = val[0];\n\n    assert.equal(\n      option.id,\n      'One',\n      'The id should be the same as the option text'\n    );\n\n    assert.equal(\n      option.text,\n      'One',\n      'The text should be the same as the option text'\n    );\n  });\n});\n\ntest('select works for single', function (assert) {\n  var $select = $('#qunit-fixture .single-with-placeholder');\n\n  var data = new SelectData($select, selectOptions);\n\n  assert.equal($select.val(), 'placeholder');\n\n  data.select({\n    id: 'One',\n    text: 'One'\n  });\n\n  assert.equal($select.val(), 'One');\n});\n\ntest('multiple sets the value', function (assert) {\n  var $select = $('#qunit-fixture .multiple');\n\n  var data = new SelectData($select, selectOptions);\n\n  assert.equal($select.val(), null);\n\n  data.select({\n    id: 'Two',\n    text: 'Two'\n  });\n\n  assert.deepEqual($select.val(), ['Two']);\n});\n\ntest('multiple adds to the old value', function (assert) {\n  var $select = $('#qunit-fixture .multiple');\n\n  var data = new SelectData($select, selectOptions);\n\n  $select.val(['Two']);\n\n  assert.deepEqual($select.val(), ['Two']);\n\n  data.select({\n    id: 'One',\n    text: 'One'\n  });\n\n  assert.deepEqual($select.val(), ['One', 'Two']);\n});\n\ntest('duplicates - single - same id on select triggers change',\n  function (assert) {\n  var $select = $('#qunit-fixture .duplicates');\n\n  var data = new SelectData($select, data);\n  var second = $('#qunit-fixture .duplicates option')[2];\n\n  var changeTriggered = false;\n\n  assert.equal($select.val(), 'one');\n\n  $select.on('change', function () {\n    changeTriggered = true;\n  });\n\n  data.select({\n    id: 'one',\n    text: 'Uno',\n    element: second\n  });\n\n  assert.equal(\n    $select.val(),\n    'one',\n    'The value never changed'\n  );\n\n  assert.ok(\n    changeTriggered,\n    'The change event should be triggered'\n  );\n\n  assert.ok(\n    second.selected,\n    'The second duplicate is selected, not the first'\n  );\n});\n\ntest('duplicates - single - different id on select triggers change',\n  function (assert) {\n  var $select = $('#qunit-fixture .duplicates');\n\n  var data = new SelectData($select, data);\n  var second = $('#qunit-fixture .duplicates option')[2];\n\n  var changeTriggered = false;\n\n  $select.val('two');\n\n  $select.on('change', function () {\n    changeTriggered = true;\n  });\n\n  data.select({\n    id: 'one',\n    text: 'Uno',\n    element: second\n  });\n\n  assert.equal(\n    $select.val(),\n    'one',\n    'The value changed to the duplicate id'\n  );\n\n  assert.ok(\n    changeTriggered,\n    'The change event should be triggered'\n  );\n\n  assert.ok(\n    second.selected,\n    'The second duplicate is selected, not the first'\n  );\n});\n\ntest('duplicates - multiple - same id on select triggers change',\nfunction (assert) {\n  var $select = $('#qunit-fixture .duplicates-multi');\n\n  var data = new SelectData($select, data);\n  var second = $('#qunit-fixture .duplicates-multi option')[2];\n\n  var changeTriggered = false;\n\n  $select.val(['one']);\n\n  $select.on('change', function () {\n    changeTriggered = true;\n  });\n\n  data.select({\n    id: 'one',\n    text: 'Uno',\n    element: second\n  });\n\n  assert.deepEqual(\n    $select.val(),\n    ['one', 'one'],\n    'The value now has duplicates'\n  );\n\n  assert.ok(\n    changeTriggered,\n    'The change event should be triggered'\n  );\n\n  assert.ok(\n    second.selected,\n    'The second duplicate is selected, not the first'\n  );\n});\n\ntest('duplicates - multiple - different id on select triggers change',\nfunction (assert) {\n  var $select = $('#qunit-fixture .duplicates-multi');\n\n  var data = new SelectData($select, data);\n  var second = $('#qunit-fixture .duplicates-multi option')[2];\n\n  var changeTriggered = false;\n\n  $select.val(['two']);\n\n  $select.on('change', function () {\n    changeTriggered = true;\n  });\n\n  data.select({\n    id: 'one',\n    text: 'Uno',\n    element: second\n  });\n\n  assert.deepEqual(\n    $select.val(),\n    ['two', 'one'],\n    'The value has the new id'\n  );\n\n  assert.ok(\n    changeTriggered,\n    'The change event should be triggered'\n  );\n\n  assert.ok(\n    second.selected,\n    'The second duplicate is selected, not the first'\n  );\n});\n\nmodule('Data adapter - Select - query');\n\ntest('all options are returned with no term', function (assert) {\n  var $select = $('#qunit-fixture .single');\n\n  var data = new SelectData($select, selectOptions);\n\n  data.query({}, function (data) {\n    assert.equal(\n      data.results.length,\n      1,\n      'The number of items returned should be equal to the number of options'\n    );\n  });\n});\n\ntest('the matcher checks the text', function (assert) {\n  var $select = $('#qunit-fixture .single');\n\n  var data = new SelectData($select, selectOptions);\n\n  data.query({\n    term: 'One'\n  }, function (data) {\n    assert.equal(\n      data.results.length,\n      1,\n      'Only the \"One\" option should be found'\n    );\n  });\n});\n\ntest('the matcher ignores case', function (assert) {\n  var $select = $('#qunit-fixture .single');\n\n  var data = new SelectData($select, selectOptions);\n\n  data.query({\n    term: 'one'\n  }, function (data) {\n    assert.equal(\n      data.results.length,\n      1,\n      'The \"One\" option should still be found'\n    );\n  });\n});\n\ntest('no options may be returned with no matches', function (assert) {\n  var $select = $('#qunit-fixture .single');\n\n  var data = new SelectData($select, selectOptions);\n\n  data.query({\n    term: 'qwerty'\n  }, function (data) {\n    assert.equal(\n      data.results.length,\n      0,\n      'Only matching items should be returned'\n    );\n  });\n});\n\ntest('optgroup tags are marked with children', function (assert) {\n  var $select = $('#qunit-fixture .groups');\n\n  var data = new SelectData($select, selectOptions);\n\n  data.query({}, function (data) {\n    assert.ok(\n      'children' in data.results[0],\n      'The optgroup element should have children when queried'\n    );\n  });\n});\n\ntest('empty optgroups are still shown when queried', function (assert) {\n  var $select = $('#qunit-fixture .groups');\n\n  var data = new SelectData($select, selectOptions);\n\n  data.query({}, function (data) {\n    assert.equal(\n      data.results.length,\n      2,\n      'The empty optgroup element should still be returned when queried'\n    );\n\n    var item = data.results[1];\n\n    assert.equal(\n      item.text,\n      'Empty',\n      'The text of the empty optgroup should match the label'\n    );\n\n    assert.equal(\n      item.children.length,\n      0,\n      'There should be no children in the empty opgroup'\n    );\n  });\n});\n\ntest('multiple options with the same value are returned', function (assert) {\n  var $select = $('#qunit-fixture .duplicates');\n\n  var data = new SelectData($select, selectOptions);\n\n  data.query({}, function (data) {\n    assert.equal(\n      data.results.length,\n      3,\n      'The duplicate option should still be returned when queried'\n    );\n\n    var first = data.results[0];\n    var duplicate = data.results[2];\n\n    assert.equal(\n      first.id,\n      duplicate.id,\n      'The duplicates should have the same id'\n    );\n\n    assert.notEqual(\n      first.text,\n      duplicate.text,\n      'The duplicates do not have the same text'\n    );\n  });\n});\n\ntest('data objects use the text of the option', function (assert) {\n  var $select = $('#qunit-fixture .duplicates');\n\n  var data = new SelectData($select, selectOptions);\n\n  var $option = $('<option>&amp;</option>');\n\n  var item = data.item($option);\n\n  assert.equal(item.id, '&');\n  assert.equal(item.text, '&');\n});\n"]}