{"version":3,"sources":["../../../../../../../../resources/assets/plugins/backend/select2-4.0.3/tests/integration/select2-methods.js"],"names":["module","$","require","Select2","Options","test","assert","$select","options","select","items","data","equal","length","first","id","text","second","value","val","deepEqual"],"mappings":";;AAAAA,OAAO,eAAP;;AAEA,IAAIC,IAAIC,QAAQ,QAAR,CAAR;AACA,IAAIC,UAAUD,QAAQ,cAAR,CAAd;AACA,IAAIE,UAAUF,QAAQ,iBAAR,CAAd;;AAEAG,KAAK,mCAAL,EAA0C,UAAUC,MAAV,EAAkB;AAC1D,MAAIC,UAAUN,EACZ,aACE,sBADF,GAEE,sBAFF,GAGE,2CAHF,GAIA,WALY,CAAd;AAOA,MAAIO,UAAU,IAAIJ,OAAJ,CAAY,EAAZ,CAAd;;AAEA,MAAIK,SAAS,IAAIN,OAAJ,CAAYI,OAAZ,EAAqBC,OAArB,CAAb;;AAEA,MAAIE,QAAQD,OAAOE,IAAP,EAAZ;;AAEAL,SAAOM,KAAP,CACEF,MAAMG,MADR,EAEE,CAFF,EAGE,0CAHF;;AAMA,MAAIC,QAAQJ,MAAM,CAAN,CAAZ;;AAEAJ,SAAOM,KAAP,CACEE,MAAMC,EADR,EAEE,GAFF,EAGE,8BAHF;;AAMAT,SAAOM,KAAP,CACEE,MAAME,IADR,EAEE,OAFF,EAGE,8BAHF;AAKD,CAjCD;;AAmCAX,KAAK,sCAAL,EAA6C,UAAUC,MAAV,EAAkB;AAC7D,MAAIC,UAAUN,EACZ,sBACE,+BADF,GAEE,sBAFF,GAGE,2CAHF,GAIA,WALY,CAAd;AAOA,MAAIO,UAAU,IAAIJ,OAAJ,CAAY,EAAZ,CAAd;;AAEA,MAAIK,SAAS,IAAIN,OAAJ,CAAYI,OAAZ,EAAqBC,OAArB,CAAb;;AAEA,MAAIE,QAAQD,OAAOE,IAAP,EAAZ;;AAEAL,SAAOM,KAAP,CACEF,MAAMG,MADR,EAEE,CAFF,EAGE,2CAHF;;AAMA,MAAIC,QAAQJ,MAAM,CAAN,CAAZ;;AAEAJ,SAAOM,KAAP,CACEE,MAAMC,EADR,EAEE,KAFF,EAGE,8BAHF;;AAMA,MAAIE,SAASP,MAAM,CAAN,CAAb;;AAEAJ,SAAOM,KAAP,CACEK,OAAOF,EADT,EAEE,GAFF,EAGE,6CAHF;AAKD,CAnCD;;AAqCAf,OAAO,cAAP;;AAEAK,KAAK,mCAAL,EAA0C,UAAUC,MAAV,EAAkB;AAC1D,MAAIC,UAAUN,EACZ,aACE,sBADF,GAEE,sBAFF,GAGE,2CAHF,GAIA,WALY,CAAd;AAOA,MAAIO,UAAU,IAAIJ,OAAJ,CAAY,EAAZ,CAAd;;AAEA,MAAIK,SAAS,IAAIN,OAAJ,CAAYI,OAAZ,EAAqBC,OAArB,CAAb;;AAEA,MAAIU,QAAQT,OAAOU,GAAP,EAAZ;;AAEAb,SAAOM,KAAP,CACEM,KADF,EAEE,GAFF,EAGE,iDAHF;;AAMAZ,SAAOM,KAAP,CACEM,KADF,EAEEX,QAAQY,GAAR,EAFF,EAGE,yCAHF;AAKD,CAzBD;;AA2BAd,KAAK,yCAAL,EAAgD,UAAUC,MAAV,EAAkB;AAChE,MAAIC,UAAUN,EACZ,sBACE,+BADF,GAEE,sBAFF,GAGE,2CAHF,GAIA,WALY,CAAd;AAOA,MAAIO,UAAU,IAAIJ,OAAJ,CAAY,EAAZ,CAAd;;AAEA,MAAIK,SAAS,IAAIN,OAAJ,CAAYI,OAAZ,EAAqBC,OAArB,CAAb;;AAEA,MAAIU,QAAQT,OAAOU,GAAP,EAAZ;;AAEAb,SAAOM,KAAP,CACEM,MAAML,MADR,EAEE,CAFF,EAGE,gCAHF;;AAMAP,SAAOc,SAAP,CACEF,KADF,EAEE,CAAC,KAAD,EAAQ,GAAR,CAFF,EAGE,kDAHF;;AAMAZ,SAAOc,SAAP,CACEF,KADF,EAEEX,QAAQY,GAAR,EAFF,EAGE,2CAHF;AAKD,CA/BD","file":"select2-methods.js","sourcesContent":["module('select2(data)');\n\nvar $ = require('jquery');\nvar Select2 = require('select2/core');\nvar Options = require('select2/options');\n\ntest('single default selection returned', function (assert) {\n  var $select = $(\n    '<select>' +\n      '<option>One</option>' +\n      '<option>Two</option>' +\n      '<option value=\"3\" selected>Three</option>' +\n    '</select>'\n  );\n  var options = new Options({});\n\n  var select = new Select2($select, options);\n\n  var items = select.data();\n\n  assert.equal(\n    items.length,\n    1,\n    'The one selected item should be returned'\n  );\n\n  var first = items[0];\n\n  assert.equal(\n    first.id,\n    '3',\n    'The first option was correct'\n  );\n\n  assert.equal(\n    first.text,\n    'Three',\n    'The first option was correct'\n  );\n});\n\ntest('multiple default selections returned', function (assert) {\n  var $select = $(\n    '<select multiple>' +\n      '<option selected>One</option>' +\n      '<option>Two</option>' +\n      '<option value=\"3\" selected>Three</option>' +\n    '</select>'\n  );\n  var options = new Options({});\n\n  var select = new Select2($select, options);\n\n  var items = select.data();\n\n  assert.equal(\n    items.length,\n    2,\n    'The two selected items should be returned'\n  );\n\n  var first = items[0];\n\n  assert.equal(\n    first.id,\n    'One',\n    'The first option was correct'\n  );\n\n  var second = items[1];\n\n  assert.equal(\n    second.id,\n    '3',\n    'The option value should be pulled correctly'\n  );\n});\n\nmodule('select2(val)');\n\ntest('single value matches jquery value', function (assert) {\n  var $select = $(\n    '<select>' +\n      '<option>One</option>' +\n      '<option>Two</option>' +\n      '<option value=\"3\" selected>Three</option>' +\n    '</select>'\n  );\n  var options = new Options({});\n\n  var select = new Select2($select, options);\n\n  var value = select.val();\n\n  assert.equal(\n    value,\n    '3',\n    'The value should match the option tag attribute'\n  );\n\n  assert.equal(\n    value,\n    $select.val(),\n    'The value should match the jquery value'\n  );\n});\n\ntest('multiple value matches the jquery value', function (assert) {\n  var $select = $(\n    '<select multiple>' +\n      '<option selected>One</option>' +\n      '<option>Two</option>' +\n      '<option value=\"3\" selected>Three</option>' +\n    '</select>'\n  );\n  var options = new Options({});\n\n  var select = new Select2($select, options);\n\n  var value = select.val();\n\n  assert.equal(\n    value.length,\n    2,\n    'Two options should be selected'\n  );\n\n  assert.deepEqual(\n    value,\n    ['One', '3'],\n    'The values should match the option tag attribute'\n  );\n\n  assert.deepEqual(\n    value,\n    $select.val(),\n    'The values should match the jquery values'\n  );\n});\n"]}