{"version":3,"sources":["../../../../../../../../resources/assets/plugins/backend/select2-4.0.3/tests/dropdown/selectOnClose-tests.js"],"names":["module","$","require","Utils","Options","SelectData","Results","SelectOnClose","ModifiedResults","Decorate","options","selectOnClose","test","assert","expect","$element","select","$dropdown","render","container","MockContainer","bind","on","ok","trigger","append","results","equal","find","length","id","text","trim","addClass"],"mappings":"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","file":"selectOnClose-tests.js","sourcesContent":["module('Dropdown - selectOnClose');\n\nvar $ = require('jquery');\n\nvar Utils = require('select2/utils');\nvar Options = require('select2/options');\n\nvar SelectData = require('select2/data/select');\n\nvar Results = require('select2/results');\nvar SelectOnClose = require('select2/dropdown/selectOnClose');\n\nvar ModifiedResults = Utils.Decorate(Results, SelectOnClose);\n\nvar options = new Options({\n  selectOnClose: true\n});\n\ntest('will not trigger if no results were given', function (assert) {\n  assert.expect(0);\n\n  var $element = $('<select></select>');\n  var select = new ModifiedResults($element, options, new SelectData($element));\n\n  var $dropdown = select.render();\n\n  var container = new MockContainer();\n  select.bind(container, $('<div></div>'));\n\n  select.on('select', function () {\n    assert.ok(false, 'The select event should not have been triggered');\n  });\n\n  container.trigger('close');\n});\n\ntest('will not trigger if the results list is empty', function (assert) {\n  assert.expect(1);\n\n  var $element = $('<select></select>');\n  var select = new ModifiedResults($element, options, new SelectData($element));\n\n  var $dropdown = select.render();\n\n  var container = new MockContainer();\n  select.bind(container, $('<div></div>'));\n\n  select.on('select', function () {\n    assert.ok(false, 'The select event should not have been triggered');\n  });\n\n  select.append({\n    results: []\n  });\n\n  assert.equal(\n    $dropdown.find('li').length,\n    0,\n    'There should not be any results in the dropdown'\n  );\n\n  container.trigger('close');\n});\n\ntest('will not trigger if no results here highlighted', function (assert) {\n  assert.expect(2);\n\n  var $element = $('<select></select>');\n  var select = new ModifiedResults($element, options, new SelectData($element));\n\n  var $dropdown = select.render();\n\n  var container = new MockContainer();\n  select.bind(container, $('<div></div>'));\n\n  select.on('select', function () {\n    assert.ok(false, 'The select event should not have been triggered');\n  });\n\n  select.append({\n    results: [\n      {\n        id: '1',\n        text: 'Test'\n      }\n    ]\n  });\n\n  assert.equal(\n    $dropdown.find('li').length,\n    1,\n    'There should be one result in the dropdown'\n  );\n\n  assert.equal(\n    $.trim($dropdown.find('li').text()),\n    'Test',\n    'The result should be the same as the one we appended'\n  );\n\n  container.trigger('close');\n});\n\ntest('will trigger if there is a highlighted result', function (assert) {\n  assert.expect(2);\n\n  var $element = $('<select></select>');\n  var select = new ModifiedResults($element, options, new SelectData($element));\n\n  var $dropdown = select.render();\n\n  var container = new MockContainer();\n  select.bind(container, $('<div></div>'));\n\n  select.on('select', function () {\n    assert.ok(true, 'The select event should have been triggered');\n  });\n\n  select.append({\n    results: [\n      {\n        id: '1',\n        text: 'Test'\n      }\n    ]\n  });\n\n  assert.equal(\n    $dropdown.find('li').length,\n    1,\n    'There should be one result in the dropdown'\n  );\n\n  $dropdown.find('li').addClass('select2-results__option--highlighted');\n\n  container.trigger('close');\n});\n"]}