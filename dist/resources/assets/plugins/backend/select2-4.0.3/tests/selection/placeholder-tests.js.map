{"version":3,"sources":["../../../../../../../../resources/assets/plugins/backend/select2-4.0.3/tests/selection/placeholder-tests.js"],"names":["module","Placeholder","require","SingleSelection","$","Options","Utils","SinglePlaceholder","Decorate","placeholderOptions","placeholder","id","text","test","assert","selection","original","normalized","normalizePlaceholder","equal","$selection","render","update"],"mappings":";;AAAAA,OAAO,qCAAP;;AAEA,IAAIC,cAAcC,QAAQ,+BAAR,CAAlB;AACA,IAAIC,kBAAkBD,QAAQ,0BAAR,CAAtB;;AAEA,IAAIE,IAAIF,QAAQ,QAAR,CAAR;AACA,IAAIG,UAAUH,QAAQ,iBAAR,CAAd;AACA,IAAII,QAAQJ,QAAQ,eAAR,CAAZ;;AAEA,IAAIK,oBAAoBD,MAAME,QAAN,CAAeL,eAAf,EAAgCF,WAAhC,CAAxB;;AAEA,IAAIQ,qBAAqB,IAAIJ,OAAJ,CAAY;AACnCK,eAAa;AACXC,QAAI,aADO;AAEXC,UAAM;AAFK;AADsB,CAAZ,CAAzB;;AAOAC,KAAK,yCAAL,EAAgD,UAAUC,MAAV,EAAkB;AAChE,MAAIC,YAAY,IAAIR,iBAAJ,CACdH,EAAE,wBAAF,CADc,EAEdK,kBAFc,CAAhB;;AAKA,MAAIO,WAAW;AACbL,QAAI,MADS;AAEbC,UAAM;AAFO,GAAf;;AAKA,MAAIK,aAAaF,UAAUG,oBAAV,CAA+BF,QAA/B,CAAjB;;AAEAF,SAAOK,KAAP,CAAaH,QAAb,EAAuBC,UAAvB;AACD,CAdD;;AAgBAJ,KAAK,iDAAL,EAAwD,UAAUC,MAAV,EAAkB;AACxE,MAAIC,YAAY,IAAIR,iBAAJ,CACdH,EAAE,wBAAF,CADc,EAEdK,kBAFc,CAAhB;;AAKA,MAAIQ,aAAaF,UAAUG,oBAAV,CAA+B,aAA/B,CAAjB;;AAEAJ,SAAOK,KAAP,CAAaF,WAAWN,EAAxB,EAA4B,EAA5B;AACAG,SAAOK,KAAP,CAAaF,WAAWL,IAAxB,EAA8B,aAA9B;AACD,CAVD;;AAaAC,KAAK,gDAAL,EAAuD,UAAUC,MAAV,EAAkB;AACvE,MAAIC,YAAY,IAAIR,iBAAJ,CACdH,EAAE,wBAAF,CADc,EAEdK,kBAFc,CAAhB;;AAKA,MAAIW,aAAaL,UAAUM,MAAV,EAAjB;;AAEAN,YAAUO,MAAV,CAAiB,CAAC;AAChBX,QAAI;AADY,GAAD,CAAjB;;AAIAG,SAAOK,KAAP,CAAaC,WAAWR,IAAX,EAAb,EAAgC,yBAAhC;AACD,CAbD;;AAeAC,KAAK,mDAAL,EAA0D,UAAUC,MAAV,EAAkB;AAC1E,MAAIC,YAAY,IAAIR,iBAAJ,CACdH,EAAE,0BAAF,CADc,EAEdK,kBAFc,CAAhB;;AAKA,MAAIW,aAAaL,UAAUM,MAAV,EAAjB;;AAEAN,YAAUO,MAAV,CAAiB,EAAjB;;AAEAR,SAAOK,KAAP,CAAaC,WAAWR,IAAX,EAAb,EAAgC,yBAAhC;AACD,CAXD","file":"placeholder-tests.js","sourcesContent":["module('Selection containers - Placeholders');\n\nvar Placeholder = require('select2/selection/placeholder');\nvar SingleSelection = require('select2/selection/single');\n\nvar $ = require('jquery');\nvar Options = require('select2/options');\nvar Utils = require('select2/utils');\n\nvar SinglePlaceholder = Utils.Decorate(SingleSelection, Placeholder);\n\nvar placeholderOptions = new Options({\n  placeholder: {\n    id: 'placeholder',\n    text: 'This is the placeholder'\n  }\n});\n\ntest('normalizing placeholder ignores objects', function (assert) {\n  var selection = new SinglePlaceholder(\n    $('#qunit-fixture .single'),\n    placeholderOptions\n  );\n\n  var original = {\n    id: 'test',\n    text: 'testing'\n  };\n\n  var normalized = selection.normalizePlaceholder(original);\n\n  assert.equal(original, normalized);\n});\n\ntest('normalizing placeholder gives object for string', function (assert) {\n  var selection = new SinglePlaceholder(\n    $('#qunit-fixture .single'),\n    placeholderOptions\n  );\n\n  var normalized = selection.normalizePlaceholder('placeholder');\n\n  assert.equal(normalized.id, '');\n  assert.equal(normalized.text, 'placeholder');\n});\n\n\ntest('text is shown for placeholder option on single', function (assert) {\n  var selection = new SinglePlaceholder(\n    $('#qunit-fixture .single'),\n    placeholderOptions\n  );\n\n  var $selection = selection.render();\n\n  selection.update([{\n    id: 'placeholder'\n  }]);\n\n  assert.equal($selection.text(), 'This is the placeholder');\n});\n\ntest('placeholder is shown when no options are selected', function (assert) {\n  var selection = new SinglePlaceholder(\n    $('#qunit-fixture .multiple'),\n    placeholderOptions\n  );\n\n  var $selection = selection.render();\n\n  selection.update([]);\n\n  assert.equal($selection.text(), 'This is the placeholder');\n});\n"]}