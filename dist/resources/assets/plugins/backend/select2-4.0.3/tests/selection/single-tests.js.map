{"version":3,"sources":["../../../../../../../../resources/assets/plugins/backend/select2-4.0.3/tests/selection/single-tests.js"],"names":["module","SingleSelection","require","$","Options","Utils","options","test","assert","called","templateOptions","templateSelection","data","text","selection","out","display","ok","equal","container","addClass","$container","selectionContainer","hasClass","$selection","render","$rendered","find","update","unescapedText"],"mappings":";;AAAAA,OAAO,+BAAP;;AAEA,IAAIC,kBAAkBC,QAAQ,0BAAR,CAAtB;;AAEA,IAAIC,IAAID,QAAQ,QAAR,CAAR;AACA,IAAIE,UAAUF,QAAQ,iBAAR,CAAd;AACA,IAAIG,QAAQH,QAAQ,eAAR,CAAZ;;AAEA,IAAII,UAAU,IAAIF,OAAJ,CAAY,EAAZ,CAAd;;AAEAG,KAAK,gCAAL,EAAuC,UAAUC,MAAV,EAAkB;AACvD,MAAIC,SAAS,KAAb;;AAEA,MAAIC,kBAAkB,IAAIN,OAAJ,CAAY;AAChCO,uBAAmB,2BAAUC,IAAV,EAAgB;AACjCH,eAAS,IAAT;;AAEA,aAAOG,KAAKC,IAAZ;AACD;AAL+B,GAAZ,CAAtB;;AAQA,MAAIC,YAAY,IAAIb,eAAJ,CACdE,EAAE,wBAAF,CADc,EAEdO,eAFc,CAAhB;;AAKA,MAAIK,MAAMD,UAAUE,OAAV,CAAkB;AAC1BH,UAAM;AADoB,GAAlB,CAAV;;AAIAL,SAAOS,EAAP,CAAUR,MAAV;;AAEAD,SAAOU,KAAP,CAAaH,GAAb,EAAkB,MAAlB;AACD,CAvBD;;AAyBAR,KAAK,gCAAL,EAAuC,UAAUC,MAAV,EAAkB;AACvD,MAAIC,SAAS,KAAb;;AAEA,MAAIC,kBAAkB,IAAIN,OAAJ,CAAY;AAChCO,uBAAmB,2BAAUC,IAAV,EAAgBO,SAAhB,EAA2B;AAC5CV,eAAS,IAAT;AACAU,gBAAUC,QAAV,CAAmB,WAAnB;AACA,aAAOR,KAAKC,IAAZ;AACD;AAL+B,GAAZ,CAAtB;;AAQA,MAAIC,YAAY,IAAIb,eAAJ,CACdE,EAAE,wBAAF,CADc,EAEdO,eAFc,CAAhB;;AAKA,MAAIW,aAAaP,UAAUQ,kBAAV,EAAjB;;AAEA,MAAIP,MAAMD,UAAUE,OAAV,CAAkB;AAC1BH,UAAM;AADoB,GAAlB,EAEPQ,UAFO,CAAV;;AAIAb,SAAOS,EAAP,CAAUR,MAAV;;AAEAD,SAAOU,KAAP,CAAaH,GAAb,EAAkB,MAAlB;;AAEAP,SAAOS,EAAP,CAAUI,WAAWE,QAAX,CAAoB,WAApB,CAAV;AACD,CA3BD;;AA6BAhB,KAAK,mCAAL,EAA0C,UAAUC,MAAV,EAAkB;AAC1D,MAAIM,YAAY,IAAIb,eAAJ,CACdE,EAAE,wBAAF,CADc,EAEdG,OAFc,CAAhB;;AAKA,MAAIkB,aAAaV,UAAUW,MAAV,EAAjB;AACA,MAAIC,YAAYF,WAAWG,IAAX,CAAgB,8BAAhB,CAAhB;;AAEAD,YAAUb,IAAV,CAAe,SAAf;;AAEAC,YAAUc,MAAV,CAAiB,EAAjB;;AAEApB,SAAOU,KAAP,CAAaQ,UAAUb,IAAV,EAAb,EAA+B,EAA/B;AACD,CAdD;;AAgBAN,KAAK,8BAAL,EAAqC,UAAUC,MAAV,EAAkB;AACrD,MAAIM,YAAY,IAAIb,eAAJ,CACdE,EAAE,wBAAF,CADc,EAEdG,OAFc,CAAhB;;AAKA,MAAIkB,aAAaV,UAAUW,MAAV,EAAjB;AACA,MAAIC,YAAYF,WAAWG,IAAX,CAAgB,8BAAhB,CAAhB;;AAEAb,YAAUc,MAAV,CAAiB,CAAC;AAChBf,UAAM;AADU,GAAD,CAAjB;;AAIAL,SAAOU,KAAP,CAAaQ,UAAUb,IAAV,EAAb,EAA+B,MAA/B;AACD,CAdD;;AAgBAN,KAAK,4BAAL,EAAmC,UAAUC,MAAV,EAAkB;AACnD,MAAIM,YAAY,IAAIb,eAAJ,CACdE,EAAE,wBAAF,CADc,EAEdG,OAFc,CAAhB;;AAKA,MAAIkB,aAAaV,UAAUW,MAAV,EAAjB;AACA,MAAIC,YAAYF,WAAWG,IAAX,CAAgB,8BAAhB,CAAhB;;AAEA,MAAIE,gBAAgB,gCAApB;;AAEAf,YAAUc,MAAV,CAAiB,CAAC;AAChBf,UAAMgB;AADU,GAAD,CAAjB;;AAIArB,SAAOU,KAAP,CACEQ,UAAUb,IAAV,EADF,EAEEgB,aAFF,EAGE,4DAHF;AAKD,CApBD","file":"single-tests.js","sourcesContent":["module('Selection containers - Single');\n\nvar SingleSelection = require('select2/selection/single');\n\nvar $ = require('jquery');\nvar Options = require('select2/options');\nvar Utils = require('select2/utils');\n\nvar options = new Options({});\n\ntest('display uses templateSelection', function (assert) {\n  var called = false;\n\n  var templateOptions = new Options({\n    templateSelection: function (data) {\n      called = true;\n\n      return data.text;\n    }\n  });\n\n  var selection = new SingleSelection(\n    $('#qunit-fixture .single'),\n    templateOptions\n  );\n\n  var out = selection.display({\n    text: 'test'\n  });\n\n  assert.ok(called);\n\n  assert.equal(out, 'test');\n});\n\ntest('templateSelection can addClass', function (assert) {\n  var called = false;\n\n  var templateOptions = new Options({\n    templateSelection: function (data, container) {\n      called = true;\n      container.addClass('testclass');\n      return data.text;\n    }\n  });\n\n  var selection = new SingleSelection(\n    $('#qunit-fixture .single'),\n    templateOptions\n  );\n\n  var $container = selection.selectionContainer();\n  \n  var out = selection.display({\n    text: 'test'\n  }, $container);\n\n  assert.ok(called);\n\n  assert.equal(out, 'test');\n  \n  assert.ok($container.hasClass('testclass'));\n});\n\ntest('empty update clears the selection', function (assert) {\n  var selection = new SingleSelection(\n    $('#qunit-fixture .single'),\n    options\n  );\n\n  var $selection = selection.render();\n  var $rendered = $selection.find('.select2-selection__rendered');\n\n  $rendered.text('testing');\n\n  selection.update([]);\n\n  assert.equal($rendered.text(), '');\n});\n\ntest('update renders the data text', function (assert) {\n  var selection = new SingleSelection(\n    $('#qunit-fixture .single'),\n    options\n  );\n\n  var $selection = selection.render();\n  var $rendered = $selection.find('.select2-selection__rendered');\n\n  selection.update([{\n    text: 'test'\n  }]);\n\n  assert.equal($rendered.text(), 'test');\n});\n\ntest('escapeMarkup is being used', function (assert) {\n  var selection = new SingleSelection(\n    $('#qunit-fixture .single'),\n    options\n  );\n\n  var $selection = selection.render();\n  var $rendered = $selection.find('.select2-selection__rendered');\n\n  var unescapedText = '<script>bad(\"stuff\");</script>';\n\n  selection.update([{\n    text: unescapedText\n  }]);\n\n  assert.equal(\n    $rendered.text(),\n    unescapedText,\n    'The text should be escaped by default to prevent injection'\n  );\n});\n"]}