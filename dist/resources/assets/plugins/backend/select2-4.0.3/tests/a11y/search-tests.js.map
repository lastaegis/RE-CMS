{"version":3,"sources":["../../../../../../../../resources/assets/plugins/backend/select2-4.0.3/tests/a11y/search-tests.js"],"names":["module","MultipleSelection","require","InlineSearch","$","Utils","Options","options","test","assert","$select","CustomSelection","Decorate","selection","$selection","render","update","equal","find","attr","container","MockContainer","bind","$search","trigger","ok"],"mappings":";;AAAAA,OAAO,wBAAP;;AAEA,IAAIC,oBAAoBC,QAAQ,4BAAR,CAAxB;AACA,IAAIC,eAAeD,QAAQ,0BAAR,CAAnB;;AAEA,IAAIE,IAAIF,QAAQ,QAAR,CAAR;;AAEA,IAAIG,QAAQH,QAAQ,eAAR,CAAZ;AACA,IAAII,UAAUJ,QAAQ,iBAAR,CAAd;AACA,IAAIK,UAAU,IAAID,OAAJ,CAAY,EAAZ,CAAd;;AAEAE,KAAK,wCAAL,EAA+C,UAAUC,MAAV,EAAkB;AAC/D,MAAIC,UAAUN,EAAE,0BAAF,CAAd;;AAEA,MAAIO,kBAAkBN,MAAMO,QAAN,CAAeX,iBAAf,EAAkCE,YAAlC,CAAtB;AACA,MAAIU,YAAY,IAAIF,eAAJ,CAAoBD,OAApB,EAA6BH,OAA7B,CAAhB;AACA,MAAIO,aAAaD,UAAUE,MAAV,EAAjB;;AAEA;AACAF,YAAUG,MAAV,CAAiB,EAAjB;;AAEAP,SAAOQ,KAAP,CACEH,WAAWI,IAAX,CAAgB,OAAhB,EAAyBC,IAAzB,CAA8B,mBAA9B,CADF,EAEE,MAFF,EAGE,0CAHF;AAKD,CAfD;;AAiBAX,KAAK,qDAAL,EAA4D,UAAUC,MAAV,EAAkB;AAC5E,MAAIC,UAAUN,EAAE,0BAAF,CAAd;;AAEA,MAAIO,kBAAkBN,MAAMO,QAAN,CAAeX,iBAAf,EAAkCE,YAAlC,CAAtB;AACA,MAAIU,YAAY,IAAIF,eAAJ,CAAoBD,OAApB,EAA6BH,OAA7B,CAAhB;AACA,MAAIO,aAAaD,UAAUE,MAAV,EAAjB;;AAEA,MAAIK,YAAY,IAAIC,aAAJ,EAAhB;AACAR,YAAUS,IAAV,CAAeF,SAAf,EAA0BhB,EAAE,eAAF,CAA1B;;AAEA;AACAS,YAAUG,MAAV,CAAiB,EAAjB;;AAEA,MAAIO,UAAUT,WAAWI,IAAX,CAAgB,OAAhB,CAAd;AACAK,UAAQJ,IAAR,CAAa,uBAAb,EAAsC,WAAtC;;AAEAC,YAAUI,OAAV,CAAkB,OAAlB;;AAEAf,SAAOgB,EAAP,CACE,CAACF,QAAQJ,IAAR,CAAa,uBAAb,CADH,EAEE,2DAFF;AAID,CAtBD","file":"search-tests.js","sourcesContent":["module('Accessibility - Search');\n\nvar MultipleSelection = require('select2/selection/multiple');\nvar InlineSearch = require('select2/selection/search');\n\nvar $ = require('jquery');\n\nvar Utils = require('select2/utils');\nvar Options = require('select2/options');\nvar options = new Options({});\n\ntest('aria-autocomplete attribute is present', function (assert) {\n  var $select = $('#qunit-fixture .multiple');\n\n  var CustomSelection = Utils.Decorate(MultipleSelection, InlineSearch);\n  var selection = new CustomSelection($select, options);\n  var $selection = selection.render();\n\n  // Update the selection so the search is rendered\n  selection.update([]);\n\n  assert.equal(\n    $selection.find('input').attr('aria-autocomplete'),\n    'list',\n    'The search box is marked as autocomplete'\n  );\n});\n\ntest('aria-activedescendant should be removed when closed', function (assert) {\n  var $select = $('#qunit-fixture .multiple');\n\n  var CustomSelection = Utils.Decorate(MultipleSelection, InlineSearch);\n  var selection = new CustomSelection($select, options);\n  var $selection = selection.render();\n\n  var container = new MockContainer();\n  selection.bind(container, $('<span></span>'));\n\n  // Update the selection so the search is rendered\n  selection.update([]);\n\n  var $search = $selection.find('input');\n  $search.attr('aria-activedescendant', 'something');\n\n  container.trigger('close');\n\n  assert.ok(\n    !$search.attr('aria-activedescendant'),\n    'There is no active descendant when the dropdown is closed'\n  );\n});\n"]}