{"version":3,"sources":["../../../../../../../../resources/assets/plugins/backend/select2-4.0.3/tests/a11y/selection-tests.js"],"names":["module","BaseSelection","require","SingleSelection","MultipleSelection","$","Options","options","test","assert","$select","selection","$selection","render","equal","attr","container","MockContainer","bind","trigger","$rendered","find"],"mappings":"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","file":"selection-tests.js","sourcesContent":["module('Accessibility - All');\n\nvar BaseSelection = require('select2/selection/base');\nvar SingleSelection = require('select2/selection/single');\nvar MultipleSelection = require('select2/selection/multiple');\n\nvar $ = require('jquery');\n\nvar Options = require('select2/options');\nvar options = new Options({});\n\ntest('title is carried over from original element', function (assert) {\n  var $select = $('#qunit-fixture .single');\n\n  var selection = new BaseSelection($select, options);\n  var $selection = selection.render();\n\n  assert.equal(\n    $selection.attr('title'),\n    $select.attr('title'),\n    'The title should have been copied over from the original element'\n  );\n});\n\ntest('aria-expanded reflects the state of the container', function (assert) {\n  var $select = $('#qunit-fixture .single');\n\n  var selection = new BaseSelection($select, options);\n  var $selection = selection.render();\n\n  var container = new MockContainer();\n\n  selection.bind(container, $('<span></span>'));\n\n  assert.equal(\n    $selection.attr('aria-expanded'),\n    'false',\n    'The container should not be expanded when it is closed'\n  );\n\n  container.trigger('open');\n\n  assert.equal(\n    $selection.attr('aria-expanded'),\n    'true',\n    'The container should be expanded when it is opened'\n  );\n});\n\ntest('static aria attributes are present', function (assert) {\n  var $select = $('#qunit-fixture .single');\n\n  var selection = new BaseSelection($select, options);\n  var $selection = selection.render();\n\n  assert.equal(\n    $selection.attr('role'),\n    'combobox',\n    'The container should identify as a combobox'\n  );\n\n  assert.equal(\n    $selection.attr('aria-haspopup'),\n    'true',\n    'The dropdown is considered a popup of the container'\n  );\n});\n\ntest('the container should be in the tab order', function (assert) {\n  var $select = $('#qunit-fixture .single');\n\n  var selection = new BaseSelection($select, options);\n  var $selection = selection.render();\n\n  var container = new MockContainer();\n  selection.bind(container, $('<span></span>'));\n\n  assert.equal(\n    $selection.attr('tabindex'),\n    '0',\n    'The tab index should allow it to fit in the natural tab order'\n  );\n\n  container.trigger('disable');\n\n  assert.equal(\n    $selection.attr('tabindex'),\n    '-1',\n    'The selection should be dropped out of the tab order when disabled'\n  );\n\n  container.trigger('enable');\n\n  assert.equal(\n    $selection.attr('tabindex'),\n    '0',\n    'The tab index should be restored when re-enabled'\n  );\n});\n\ntest('a custom tabindex is copied', function (assert) {\n  var $select = $('#qunit-fixture .single');\n  $select.attr('tabindex', '999');\n\n  var selection = new BaseSelection($select, options);\n  var $selection = selection.render();\n\n  var container = new MockContainer();\n  selection.bind(container, $('<span></span>'));\n\n  assert.equal(\n    $selection.attr('tabindex'),\n    '999',\n    'The tab index should match the original tab index'\n  );\n\n  container.trigger('disable');\n\n  assert.equal(\n    $selection.attr('tabindex'),\n    '-1',\n    'The selection should be dropped out of the tab order when disabled'\n  );\n\n  container.trigger('enable');\n\n  assert.equal(\n    $selection.attr('tabindex'),\n    '999',\n    'The tab index should be restored when re-enabled'\n  );\n});\n\nmodule('Accessibility - Single');\n\ntest('aria-labelledby should match the rendered container', function (assert) {\n  var $select = $('#qunit-fixture .single');\n\n  var selection = new SingleSelection($select, options);\n  var $selection = selection.render();\n\n  var container = new MockContainer();\n  selection.bind(container, $('<span></span>'));\n\n  var $rendered = $selection.find('.select2-selection__rendered');\n\n  assert.equal(\n    $selection.attr('aria-labelledby'),\n    $rendered.attr('id'),\n    'The rendered selection should label the container'\n  );\n});\n\nmodule('Accessibility - Multiple');\n"]}