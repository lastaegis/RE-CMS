{"version":3,"sources":["../../../../../../../../resources/assets/plugins/backend/select2-4.0.3/tests/results/focusing-tests.js"],"names":["module","test","assert","expect","$","require","$select","$parent","$container","container","MockContainer","appendTo","Utils","Options","Results","results","data","current","callback","id","render","bind","on","params","ok","trigger","equal","text"],"mappings":"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","file":"focusing-tests.js","sourcesContent":["module('Results - highlighting results');\n\ntest('results:all with no data skips results:focus', function (assert) {\n  assert.expect(0);\n\n  var $ = require('jquery');\n\n  var $select = $('<select></select>');\n  var $parent = $('<div></div>');\n\n  var $container = $('<span></span>');\n  var container = new MockContainer();\n\n  $parent.appendTo($('#qunit-fixture'));\n  $select.appendTo($parent);\n\n  var Utils = require('select2/utils');\n  var Options = require('select2/options');\n\n  var Results = require('select2/results');\n\n  var results = new Results($select, new Options({}));\n\n  // Fake the data adapter for the `setClasses` method\n  results.data = {};\n  results.data.current = function (callback) {\n    callback([{ id: 'test' }]);\n  };\n\n  results.render();\n\n  results.bind(container, $container);\n\n  results.on('results:focus', function (params) {\n    assert.ok(false, 'The results:focus event was triggered');\n  });\n\n  container.trigger('results:all', {\n    data: {\n      results: []\n    }\n  });\n});\n\ntest('results:all triggers results:focus on the first item', function (assert) {\n  assert.expect(2);\n\n  var $ = require('jquery');\n\n  var $select = $('<select></select>');\n  var $parent = $('<div></div>');\n\n  var $container = $('<span></span>');\n  var container = new MockContainer();\n\n  $parent.appendTo($('#qunit-fixture'));\n  $select.appendTo($parent);\n\n  var Utils = require('select2/utils');\n  var Options = require('select2/options');\n\n  var Results = require('select2/results');\n\n  var results = new Results($select, new Options({}));\n\n  // Fake the data adapter for the `setClasses` method\n  results.data = {};\n  results.data.current = function (callback) {\n    callback([{ id: 'test' }]);\n  };\n\n  results.render();\n\n  results.bind(container, $container);\n\n  results.on('results:focus', function (params) {\n    assert.equal(params.data.id, 'test');\n    assert.equal(params.data.text, 'Test');\n  });\n\n  container.trigger('results:all', {\n    data: {\n      results: [\n        {\n          id: 'test',\n          text: 'Test'\n        }\n      ]\n    }\n  });\n});\n\ntest('results:append does not trigger results:focus', function (assert) {\n  assert.expect(0);\n\n  var $ = require('jquery');\n\n  var $select = $('<select></select>');\n  var $parent = $('<div></div>');\n\n  var $container = $('<span></span>');\n  var container = new MockContainer();\n\n  $parent.appendTo($('#qunit-fixture'));\n  $select.appendTo($parent);\n\n  var Utils = require('select2/utils');\n  var Options = require('select2/options');\n\n  var Results = require('select2/results');\n\n  var results = new Results($select, new Options({}));\n\n  // Fake the data adapter for the `setClasses` method\n  results.data = {};\n  results.data.current = function (callback) {\n    callback([{ id: 'test' }]);\n  };\n\n  results.render();\n\n  results.bind(container, $container);\n\n  results.on('results:focus', function () {\n    assert.ok(false, 'The results:focus event was triggered');\n  });\n\n  container.trigger('results:append', {\n    data: {\n      results: [\n        {\n          id: 'test',\n          text: 'Test'\n        }\n      ]\n    }\n  });\n});"]}