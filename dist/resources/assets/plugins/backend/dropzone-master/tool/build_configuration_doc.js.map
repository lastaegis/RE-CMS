{"version":3,"sources":["../../../../../../../resources/assets/plugins/backend/dropzone-master/tool/build_configuration_doc.js"],"names":["fs","require","marked","srcFile","dstFile","fileData","readFileSync","data","dataLines","split","configBlockRegExp","configBlock","exec","singleConfigRegExp","docLineRegExp","functionRegExp","htmlDoc","configCount","firstDict","firstFunction","matchResult","rawDoc","docMatchResult","docLine","charAt","substr","varName","defaultValue","indexOf","test","doc","replace","getLine","writeFileSync","console","log","config","i","length","RegExp"],"mappings":";;AAAA;;;;AAIA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;;AAEA,IAAME,UAAU,uDAAhB;AACA,IAAMC,UAAU,8CAAhB;;AAEA,IAAIC,WAAWL,GAAGM,YAAH,CAAgBH,OAAhB,EAAyB,MAAzB,CAAf;AACA,IAAMI,OAAOP,GAAGM,YAAH,CAAgB,qBAAhB,EAAuC,MAAvC,CAAb;AACA,IAAME,YAAYD,KAAKE,KAAL,CAAW,IAAX,CAAlB;;AAEA;AACA,IAAMC,oBAAoB,sCAA1B;AACA,IAAMC,cAAcD,kBAAkBE,IAAlB,CAAuBL,IAAvB,EAA6B,CAA7B,CAApB;;AAEA,IAAMM,qBAAqB,uCAA3B;;AAEA,IAAMC,gBAAgB,cAAtB;AACA,IAAMC,iBAAiB,iBAAvB;;AAEA,IAAIC,UAAU,EAAd;;AAEA,IAAIC,cAAc,CAAlB;;AAEA;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,gBAAgB,IAApB;;AAEA,OAAO,CAACC,cAAcP,mBAAmBD,IAAnB,CAAwBD,WAAxB,CAAf,MAAyD,IAAhE,EAAsE;AACpE,MAAIU,SAAS,EAAb;AACA;AACA,SAAO,CAACC,iBAAiBR,cAAcF,IAAd,CAAmBQ,YAAY,CAAZ,CAAnB,CAAlB,MAA0D,IAAjE,EAAuE;AACrE,QAAIG,UAAUD,eAAe,CAAf,CAAd;AACA;AACA,QAAIC,QAAQC,MAAR,CAAe,CAAf,MAAsB,GAA1B,EAA+BD,UAAUA,QAAQE,MAAR,CAAe,CAAf,CAAV;AAC/BJ,cAAUE,UAAU,IAApB;AACD;;AAED,MAAIG,UAAUN,YAAY,CAAZ,CAAd;AACA,MAAIO,eAAeP,YAAY,CAAZ,CAAnB;;AAEA,MAAIM,QAAQE,OAAR,CAAgB,MAAhB,MAA4B,CAAhC,EAAmC;AACjC,QAAIV,SAAJ,EAAe;AACbF;AAGAE,kBAAY,KAAZ;AACD;AACDG,mBAAcM,YAAd,aAAmCN,MAAnC;AACAM,mBAAe,iBAAf;AACD,GATD,MASO,IAAIZ,eAAec,IAAf,CAAoBF,YAApB,CAAJ,EAAuC;AAC5C,QAAIR,aAAJ,EAAmB;AACjBH;AAGAG,sBAAgB,KAAhB;AACD;AACDQ,mBAAeA,iBAAiB,SAAjB,GAA6B,gBAA7B,GAAgD,UAA/D;AACD,GARM,MAQA,IAAIA,iBAAiB,KAArB,EAA4B;AACjCA,mBAAe,eAAf;AACD;;AAED,MAAIG,MAAM5B,OAAOmB,MAAP,CAAV;;AAEAS,QAAMA,IACDC,OADC,CACO,KADP,EACc,yBADd,EAEDA,OAFC,CAEO,KAFP,EAEc,yBAFd,CAAN;;AAIAf,uCACmBU,OADnB,+DAGyBA,OAHzB,gBAG2CA,OAH3C,wKAMmFM,QAAQN,OAAR,CANnF,2DAOgDC,YAPhD,oEAUQG,GAVR;;AAcAb;AACD;;AAEDjB,GAAGiC,aAAH,CAAiB7B,OAAjB,EAA0BC,SAAS0B,OAAT,CAAiB,kBAAjB,EAAqCf,OAArC,CAA1B;;AAEAkB,QAAQC,GAAR,kCAA2ClB,WAA3C,+BAAgFb,OAAhF;;AAGA;;;AAGA,SAAS4B,OAAT,CAAiBI,MAAjB,EAAyB;AACvB,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI7B,UAAU8B,MAA9B,EAAsCD,GAAtC,EAA2C;AACzC,QAAI,IAAIE,MAAJ,WAAmBH,MAAnB,UAAgCP,IAAhC,CAAqCrB,UAAU6B,CAAV,CAArC,CAAJ,EAAwD;AACtD,aAAOA,IAAI,CAAX;AACD;AACF;AACDH,UAAQC,GAAR,CAAY,yBAAZ;AACD","file":"build_configuration_doc.js","sourcesContent":["/**\n * This file builds the configuration documentation for the website, from the actual source file\n */\n\nconst fs = require('fs');\nconst marked = require('marked');\n\nconst srcFile = 'website/_includes/configuration-options.template.html';\nconst dstFile = 'website/_includes/configuration-options.html';\n\nlet fileData = fs.readFileSync(srcFile, \"utf8\");\nconst data = fs.readFileSync('src/dropzone.coffee', \"utf8\");\nconst dataLines = data.split(\"\\n\");\n\n// Get the content between `defaultOptions:` and `# END OPTIONS`\nconst configBlockRegExp = /defaultOptions:([^]*?)# END OPTIONS/g;\nconst configBlock = configBlockRegExp.exec(data)[1];\n\nconst singleConfigRegExp = /((^\\s*#.*$\\n)+)^\\s*(\\w+)\\s*:\\s*(.*)/gm;\n\nconst docLineRegExp = /^\\s*#(.*)$/gm;\nconst functionRegExp = /(\\(.*\\))?\\s*-\\>/;\n\nlet htmlDoc = '';\n\nlet configCount = 0;\n\n// Used to add a separator line\nlet firstDict = true;\nlet firstFunction = true;\n\nwhile ((matchResult = singleConfigRegExp.exec(configBlock)) !== null) {\n  let rawDoc = '';\n  // Get each line of doc\n  while ((docMatchResult = docLineRegExp.exec(matchResult[1])) !== null) {\n    let docLine = docMatchResult[1];\n    // Strip the first space of each docline\n    if (docLine.charAt(0) === ' ') docLine = docLine.substr(1);\n    rawDoc += docLine + '\\n';\n  }\n\n  let varName = matchResult[3];\n  let defaultValue = matchResult[4];\n\n  if (varName.indexOf('dict') === 0) {\n    if (firstDict) {\n      htmlDoc += `<tr>\n        <td class=\"separator\" colspan=\"2\">to translate dropzone, you can provide these options:</td>\n      </tr>`;\n      firstDict = false;\n    }\n    rawDoc = `\\`${defaultValue}\\`<br>${rawDoc}`;\n    defaultValue = 'see description';\n  } else if (functionRegExp.test(defaultValue)) {\n    if (firstFunction) {\n      htmlDoc += `<tr>\n        <td class=\"separator\" colspan=\"2\">functions you can override to change or extend default behavior:</td>\n      </tr>`;\n      firstFunction = false;\n    }\n    defaultValue = defaultValue === '-> noop' ? 'empty Function' : 'function';\n  } else if (defaultValue === '\"\"\"') {\n    defaultValue = 'HTML template';\n  }\n\n  let doc = marked(rawDoc);\n\n  doc = doc\n      .replace(/{{/g, '{% raw %}{{{% endraw %}')\n      .replace(/}}/g, '{% raw %}}}{% endraw %}');\n\n  htmlDoc += `\n    <tr id=\"config-${varName}\">\n      <td class=\"label\">\n        <a href=\"#config-${varName}\"><code>${varName}</code></a>\n        <a title=\"See source code\"\n           target=\"_blank\"\n           href=\"https://gitlab.com/meno/dropzone/blob/master/src/dropzone.coffee#L${getLine(varName)}\"\n           class=\"default-value\"><code>default: ${defaultValue}</code></a>\n      </td>\n      <td class=\"value\">\n        ${doc}\n      </td>\n    </tr>`;\n\n  configCount++;\n}\n\nfs.writeFileSync(dstFile, fileData.replace('<!-- options -->', htmlDoc));\n\nconsole.log(`Success! Created config for ${configCount} options and wrote to \"${dstFile}\"`);\n\n\n/**\n * Returns the line for given config\n */\nfunction getLine(config) {\n  for (let i = 0; i < dataLines.length; i++) {\n    if (new RegExp(`^\\\\s*${config}\\\\:`).test(dataLines[i])) {\n      return i + 1;\n    }\n  }\n  console.log(\"Warning: line not found\");\n}"]}